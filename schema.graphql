# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Attestation {
  attester: String
  block_timestamp: BigInt
  data: JSON
  hypercerts: [Hypercert!]
  id: ID!
  recipient: String
  resolver: String
  schema: String
  supported_schemas_id: ID
  uid: ID
}

input AttestationFetchInput {
  by: AttestationSortOptions
}

type AttestationSchema {
  chain_id: BigInt
  id: ID!
  records: [Attestation!]
  resolver: String
  revocable: Boolean
  schema: String
  uid: ID
}

input AttestationSchemaFetchInput {
  by: AttestationSchemaSortOptions
}

input AttestationSchemaSortOptions {
  chain_id: SortOrder
  eas_schema_id: SortOrder
  resolver: SortOrder
  revocable: SortOrder
}

input AttestationSchemaWhereInput {
  attestations: BasicAttestationSchemaWhereInput
  chain_id: NumberSearchOptions
  id: IdSearchOptions
  resolver: StringSearchOptions
  revocable: BooleanSearchOptions
  schema: StringSearchOptions
  uid: StringSearchOptions
}

input AttestationSortOptions {
  attestation_uid: SortOrder
  attester_address: SortOrder
  block_timestamp: SortOrder
  recipient_address: SortOrder
  schema: SortOrder
}

input AttestationWhereInput {
  attestation: StringSearchOptions
  attestations: BasicAttestationWhereInput
  attester: StringSearchOptions
  block_timestamp: NumberSearchOptions
  chain_id: NumberSearchOptions
  contract_address: StringSearchOptions
  hypercerts: BasicHypercertWhereInput
  id: IdSearchOptions
  metadata: BasicMetadataWhereInput
  recipient: StringSearchOptions
  resolver: StringSearchOptions
  schema: StringSearchOptions
  supported_schemas_id: StringSearchOptions
  token_id: StringSearchOptions
  uid: StringSearchOptions
}

input BasicAttestationSchemaWhereInput {
  chain_id: NumberSearchOptions
  id: IdSearchOptions
  resolver: StringSearchOptions
  revocable: BooleanSearchOptions
  schema: StringSearchOptions
  uid: StringSearchOptions
}

input BasicAttestationWhereInput {
  attestation: StringSearchOptions
  attester: StringSearchOptions
  block_timestamp: NumberSearchOptions
  chain_id: NumberSearchOptions
  contract_address: StringSearchOptions
  id: IdSearchOptions
  recipient: StringSearchOptions
  resolver: StringSearchOptions
  schema: StringSearchOptions
  supported_schemas_id: StringSearchOptions
  token_id: StringSearchOptions
  uid: StringSearchOptions
}

input BasicCollectionWhereInput {
  admin_id: StringSearchOptions
  chain_id: NumberSearchOptions
  id: IdSearchOptions
}

input BasicContractWhereInput {
  chain_id: NumberSearchOptions
  contract_address: StringSearchOptions
  id: IdSearchOptions
}

input BasicFractionWhereInput {
  creation_block_timestamp: NumberSearchOptions
  hypercert_id: StringSearchOptions
  id: IdSearchOptions
  last_block_update_timestamp: NumberSearchOptions
  owner_address: StringSearchOptions
  token_id: NumberSearchOptions
  units: NumberSearchOptions
}

input BasicHypercertWhereInput {
  block_number: NumberSearchOptions
  creator_address: StringSearchOptions
  hypercert_id: StringSearchOptions
  id: IdSearchOptions
  token_id: NumberSearchOptions
  uri: StringSearchOptions
}

input BasicMetadataWhereInput {
  contributors: StringArraySearchOptions
  creation_block_timestamp: NumberSearchOptions
  description: StringSearchOptions
  id: IdSearchOptions
  impact_scope: StringArraySearchOptions
  impact_timeframe_from: NumberSearchOptions
  impact_timeframe_to: NumberSearchOptions
  last_block_update_timestamp: NumberSearchOptions
  name: StringSearchOptions
  rights: StringArraySearchOptions
  uri: StringSearchOptions
  work_scope: StringArraySearchOptions
  work_timeframe_from: NumberSearchOptions
  work_timeframe_to: NumberSearchOptions
}

input BasicOrderWhereInput {
  chain_id: NumberSearchOptions
  id: IdSearchOptions
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input BooleanSearchOptions {
  eq: Boolean
}

type Collection {
  admin_address: String!
  background_image: String!
  chain_id: BigInt
  grayscale_image: Boolean!
  id: ID!
  name: String!
  tile_border_color: String!
}

input CollectionFetchInput {
  by: ContractSortOptions
}

"""Pointer to a contract deployed on a chain"""
type Contract {
  """The ID of the chain on which the contract is deployed"""
  chain_id: BigInt

  """The address of the contract"""
  contract_address: String
  id: ID!

  """The block number at which the contract was deployed"""
  start_block: BigInt
}

input ContractFetchInput {
  by: ContractSortOptions
}

input ContractSortOptions {
  chain_id: SortOrder
  contract_address: SortOrder
  contract_id: SortOrder
}

"""Count keys for the count query"""
enum CountKeys {
  """
  Count the number of items in the query and return it along with the data
  """
  COUNT

  """Only get the count, not the data"""
  HEAD
}

"""Handles uint256 bigint values stored in DB"""
scalar EthBigInt

type Fraction {
  creation_block_timestamp: BigInt

  """
  The ID of the fraction concatenated from the chain ID, contract address, and token ID
  """
  fraction_id: ID
  id: ID!
  last_block_update_timestamp: BigInt

  """The metadata for the fraction"""
  metadata: Metadata

  """Marketplace orders related to this fraction"""
  orders: GetOrdersResponse

  """Address of the owner of the fractions"""
  owner_address: String

  """Units held by the fraction"""
  units: EthBigInt
}

input FractionFetchInput {
  by: FractionSortOptions
}

input FractionSortOptions {
  creation_block_timestamp: SortOrder
  last_block_update_timestamp: SortOrder
  owner_address: SortOrder
  token_id: SortOrder
  units: SortOrder
}

input FractionWhereInput {
  creation_block_timestamp: NumberSearchOptions
  hypercert_id: StringSearchOptions
  hypercerts: BasicHypercertWhereInput
  id: IdSearchOptions
  last_block_update_timestamp: NumberSearchOptions
  owner_address: StringSearchOptions
  token_id: NumberSearchOptions
  units: NumberSearchOptions
}

type GetAttestationsResponse {
  count: Int
  data: [Attestation!]
}

type GetAttestationsSchemaResponse {
  count: Int
  data: [AttestationSchema!]!
}

type GetCollectionsResponse {
  count: Int
  data: [Collection!]
}

type GetContractsResponse {
  count: Int
  data: [Contract!]
}

type GetFractionsResponse {
  count: Int
  data: [Fraction!]
}

type GetHypercertsResponse {
  count: Int
  data: [Hypercert!]
}

type GetMetadataResponse {
  count: Int
  data: [Metadata!]
}

type GetOrdersResponse {
  count: Int
  data: [Order!]
  lowestAvailablePrice: BigInt
  totalUnitsForSale: BigInt
}

type Hypercert {
  """Attestations for the hypercert or parts of its data"""
  attestations: GetAttestationsResponse

  """The block number at which the hypercert was stored on chain"""
  block_number: BigInt

  """The contract that the hypercert is associated with"""
  contract: Contract

  """The UUID of the contract as stored in the database"""
  contracts_id: ID

  """The address of the creator of the hypercert"""
  creator_address: String

  """Transferable fractions representing partial ownership of the hypercert"""
  fractions: GetFractionsResponse

  """
  Concatenation of [chainID]-[contractAddress]-[tokenID] to discern hypercerts across chains
  """
  hypercert_id: ID
  id: ID!
  last_block_update_timestamp: BigInt

  """The metadata for the hypercert as referenced by the uri"""
  metadata: Metadata

  """Marketplace orders related to this hypercert"""
  orders: GetOrdersResponse

  """The token ID of the hypercert"""
  token_id: EthBigInt

  """The total units held by the hypercert"""
  units: EthBigInt

  """References the metadata for this claim"""
  uri: String
}

input HypercertFetchInput {
  by: HypercertSortOptions
}

input HypercertSortOptions {
  block_number: SortOrder
  claim_attestation_count: SortOrder
  hypercert_id: SortOrder
  last_block_update_timestamp: SortOrder
  owner_address: SortOrder
  token_id: SortOrder
  units: SortOrder
  uri: SortOrder
}

input HypercertsWhereInput {
  attestations: BasicAttestationWhereInput
  block_number: NumberSearchOptions
  contract: BasicContractWhereInput
  creator_address: StringSearchOptions
  fractions: BasicFractionWhereInput
  hypercert_id: StringSearchOptions
  id: IdSearchOptions
  metadata: BasicMetadataWhereInput
  token_id: NumberSearchOptions
  uri: StringSearchOptions
}

input IdSearchOptions {
  eq: UUID
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Metadata {
  allow_list_uri: String
  contributors: [String!]
  description: String
  external_url: String
  id: ID!
  image: String
  impact_scope: [String!]
  impact_timeframe_from: BigInt
  impact_timeframe_to: BigInt
  name: String
  properties: JSON
  rights: [String!]
  uri: String
  work_scope: [String!]
  work_timeframe_from: BigInt
  work_timeframe_to: BigInt
}

input MetadataFetchInput {
  by: MetadataSortOptions
}

input MetadataSortOptions {
  allow_list_uri: SortOrder
  description: SortOrder
  external_url: SortOrder
  metadata_id: SortOrder
  name: SortOrder
  uri: SortOrder
}

input MetadataWhereInput {
  contributors: StringArraySearchOptions
  creation_block_timestamp: NumberSearchOptions
  description: StringSearchOptions
  hypercerts: BasicHypercertWhereInput
  id: IdSearchOptions
  impact_scope: StringArraySearchOptions
  impact_timeframe_from: NumberSearchOptions
  impact_timeframe_to: NumberSearchOptions
  last_block_update_timestamp: NumberSearchOptions
  name: StringSearchOptions
  rights: StringArraySearchOptions
  uri: StringSearchOptions
  work_scope: StringArraySearchOptions
  work_timeframe_from: NumberSearchOptions
  work_timeframe_to: NumberSearchOptions
}

input NumberSearchOptions {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  lt: BigInt
  lte: BigInt
}

type Order {
  additionalParameters: String!
  amounts: [Float!]!
  chainId: BigInt!
  collection: String!
  collectionType: Float!
  createdAt: String!
  currency: String!
  endTime: Float!
  globalNonce: String!
  id: ID!
  itemIds: [String!]!
  orderNonce: String!
  price: String!
  quoteType: Float!
  signature: String!
  signer: String!
  startTime: Float!
  strategyId: Float!
  subsetNonce: Float!
}

input OrderFetchInput {
  by: ContractSortOptions
}

type Query {
  attestationSchemas(count: CountKeys, first: Int, offset: Int, sort: AttestationSchemaFetchInput, where: AttestationSchemaWhereInput): GetAttestationsSchemaResponse!
  attestations(count: CountKeys, first: Int, offset: Int, sort: AttestationFetchInput, where: AttestationWhereInput): GetAttestationsResponse!
  collections(count: CountKeys, first: Int, offset: Int, sort: CollectionFetchInput, where: BasicCollectionWhereInput): GetCollectionsResponse!
  contracts(count: CountKeys, first: Int, offset: Int, sort: ContractFetchInput, where: BasicContractWhereInput): GetContractsResponse!
  fractions(count: CountKeys, first: Int, offset: Int, sort: FractionFetchInput, where: FractionWhereInput): GetFractionsResponse!
  hypercerts(count: CountKeys, first: Int, offset: Int, sort: HypercertFetchInput, where: HypercertsWhereInput): GetHypercertsResponse!
  metadata(count: CountKeys, first: Int, offset: Int, sort: MetadataFetchInput, where: MetadataWhereInput): GetMetadataResponse!
  orders(count: CountKeys, first: Int, offset: Int, sort: OrderFetchInput, where: BasicOrderWhereInput): GetOrdersResponse!
}

"""The direction to sort the query results"""
enum SortOrder {
  """Ascending order"""
  ascending

  """Descending order"""
  descending
}

input StringArraySearchOptions {
  contains: [String!]
}

input StringSearchOptions {
  contains: String
  endsWith: String
  eq: String
  startsWith: String
}

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID
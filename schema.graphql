# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Records of allow list entries for claimable fractions"""
type AllowlistRecord {
  """Whether the fraction has been claimed"""
  claimed: Boolean

  """The entry index of the Merkle tree for the claimable fraction"""
  entry: Float

  """The hypercert that the allow list record belongs to"""
  hypercert: Hypercert

  """The hypercert ID the claimable fraction belongs to"""
  hypercert_id: String

  """The ID of the allow list record"""
  id: String

  """The leaf of the Merkle tree for the claimable fraction"""
  leaf: String

  """The proof for the claimable fraction"""
  proof: [String!]

  """The root of the allow list Merkle tree"""
  root: String

  """The token ID of the hypercert the claimable fraction belongs to"""
  token_id: EthBigInt

  """The total number of units held by the hypercert"""
  total_units: EthBigInt

  """The number of units of the claimable fraction"""
  units: EthBigInt

  """The address of the user who can claim the fraction"""
  user_address: String
}

input AllowlistRecordHypercertWhereInput {
  attestations_count: NumberSearchOptions
  burned: BooleanSearchOptions
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  creator_address: StringSearchOptions
  hypercert_id: StringSearchOptions
  id: StringSearchOptions
  last_update_block_number: BigIntSearchOptions
  last_update_block_timestamp: BigIntSearchOptions
  sales_count: NumberSearchOptions
  token_id: BigIntSearchOptions
  units: BigIntSearchOptions
  uri: StringSearchOptions
}

input AllowlistRecordSortOptions {
  claimed: SortOrder = null
  entry: SortOrder = null
  hypercert_id: SortOrder = null
  leaf: SortOrder = null
  proof: SortOrder = null
  root: SortOrder = null
  token_id: SortOrder = null
  total_units: SortOrder = null
  units: SortOrder = null
  user_address: SortOrder = null
}

input AllowlistRecordWhereInput {
  claimed: BooleanSearchOptions
  entry: NumberSearchOptions
  hypercert: AllowlistRecordHypercertWhereInput = {}
  hypercert_id: StringSearchOptions
  leaf: StringSearchOptions
  proof: StringArraySearchOptions
  root: StringSearchOptions
  token_id: BigIntSearchOptions
  total_units: BigIntSearchOptions
  units: BigIntSearchOptions
  user_address: StringSearchOptions
}

"""Attestation on the Ethereum Attestation Service"""
type Attestation {
  """Address of the creator of the attestation"""
  attester: String

  """Block number at which the attestation was created"""
  creation_block_number: EthBigInt

  """Timestamp at which the attestation was created"""
  creation_block_timestamp: EthBigInt

  """Encoded data of the attestation"""
  data: JSON

  """Schema related to the attestation"""
  eas_schema: AttestationSchemaBaseType!

  """Hypercert related to the attestation"""
  hypercert: HypercertBaseType!
  id: ID

  """Block number at which the attestation was last updated"""
  last_update_block_number: EthBigInt

  """Timestamp at which the attestation was last updated"""
  last_update_block_timestamp: EthBigInt

  """Metadata related to the attestation"""
  metadata: Metadata!

  """Address of the recipient of the attestation"""
  recipient: String

  """Unique identifier of the EAS schema used to create the attestation"""
  schema_uid: String

  """Unique identifier for the attestation on EAS"""
  uid: ID
}

input AttestationAttestationSchemaWhereInput {
  chain_id: NumberSearchOptions
  id: StringSearchOptions
  resolver: StringSearchOptions
  revocable: BooleanSearchOptions
  uid: StringSearchOptions
}

input AttestationHypercertWhereInput {
  attestations_count: NumberSearchOptions
  burned: BooleanSearchOptions
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  creator_address: StringSearchOptions
  hypercert_id: StringSearchOptions
  id: StringSearchOptions
  last_update_block_number: BigIntSearchOptions
  last_update_block_timestamp: BigIntSearchOptions
  sales_count: NumberSearchOptions
  token_id: BigIntSearchOptions
  units: BigIntSearchOptions
  uri: StringSearchOptions
}

"""Supported EAS attestation schemas and their related records"""
type AttestationSchema {
  """List of attestations related to the attestation schema"""
  attestations: GetAttestationsResponse!

  """Chain ID of the chains where the attestation schema is supported"""
  chain_id: EthBigInt!
  id: ID

  """Address of the resolver contract for the attestation schema"""
  resolver: String!

  """Whether the attestation schema is revocable"""
  revocable: Boolean!

  """String representation of the attestation schema"""
  schema: String!

  """Unique identifier for the attestation schema"""
  uid: ID!
}

input AttestationSchemaAttestationWhereInput {
  attester: StringSearchOptions
  contract_address: StringSearchOptions
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  id: StringSearchOptions
  last_update_block_number: BigIntSearchOptions
  last_update_block_timestamp: BigIntSearchOptions
  recipient: StringSearchOptions
  resolver: StringSearchOptions
  supported_schemas_id: StringSearchOptions
  uid: StringSearchOptions
}

"""Supported EAS attestation schemas and their related records"""
type AttestationSchemaBaseType {
  """Chain ID of the chains where the attestation schema is supported"""
  chain_id: EthBigInt!
  id: ID

  """Address of the resolver contract for the attestation schema"""
  resolver: String!

  """Whether the attestation schema is revocable"""
  revocable: Boolean!

  """String representation of the attestation schema"""
  schema: String!

  """Unique identifier for the attestation schema"""
  uid: ID!
}

input AttestationSchemaSortOptions {
  chain_id: SortOrder = null
  id: SortOrder = null
  resolver: SortOrder = null
  revocable: SortOrder = null
  uid: SortOrder = null
}

input AttestationSchemaWhereInput {
  attestations: AttestationSchemaAttestationWhereInput = {}
  chain_id: NumberSearchOptions
  id: StringSearchOptions
  resolver: StringSearchOptions
  revocable: BooleanSearchOptions
  uid: StringSearchOptions
}

input AttestationSortOptions {
  attester: SortOrder = null
  contract_address: SortOrder = null
  creation_block_number: SortOrder = null
  creation_block_timestamp: SortOrder = null
  id: SortOrder = null
  last_update_block_number: SortOrder = null
  last_update_block_timestamp: SortOrder = null
  recipient: SortOrder = null
  resolver: SortOrder = null
  supported_schemas_id: SortOrder = null
  uid: SortOrder = null
}

input AttestationWhereInput {
  attester: StringSearchOptions
  contract_address: StringSearchOptions
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  eas_schema: AttestationAttestationSchemaWhereInput = {}
  hypercert: AttestationHypercertWhereInput = {}
  id: StringSearchOptions
  last_update_block_number: BigIntSearchOptions
  last_update_block_timestamp: BigIntSearchOptions
  recipient: StringSearchOptions
  resolver: StringSearchOptions
  supported_schemas_id: StringSearchOptions
  uid: StringSearchOptions
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

input BigIntSearchOptions {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  lt: BigInt
  lte: BigInt
}

"""Blueprint for hypercert creation"""
type Blueprint {
  admins: [User!]!
  created_at: String!
  form_values: JSON!
  hypercerts: HypercertsResponse!
  id: Float!
  minted: Boolean!
  minter_address: String!
}

input BlueprintSortOptions {
  admin_address: SortOrder = null
  created_at: SortOrder = null
  id: SortOrder = null
  minted: SortOrder = null
  minter_address: SortOrder = null
}

input BlueprintUserWhereInput {
  address: StringSearchOptions
  chain_id: NumberSearchOptions
  display_name: StringSearchOptions
  id: StringSearchOptions
}

input BlueprintWhereInput {
  admin_address: StringSearchOptions
  admins: BlueprintUserWhereInput = {}
  created_at: StringSearchOptions
  id: NumberSearchOptions
  minted: BooleanSearchOptions
  minter_address: StringSearchOptions
}

input BooleanSearchOptions {
  eq: Boolean
}

"""Collection of hypercerts for reference and display purposes"""
type Collection {
  admins: [User!]!
  blueprints: [Blueprint!]

  """Chain ID of the collection"""
  chain_ids: [EthBigInt!]

  """Creation timestamp of the collection"""
  created_at: String!

  """Description of the collection"""
  description: String!
  hypercerts: HypercertsResponse
  id: ID

  """Name of the collection"""
  name: String!
}

input CollectionBlueprintWhereInput {
  admin_address: StringSearchOptions
  created_at: StringSearchOptions
  id: NumberSearchOptions
  minted: BooleanSearchOptions
  minter_address: StringSearchOptions
}

input CollectionHypercertWhereInput {
  attestations_count: NumberSearchOptions
  burned: BooleanSearchOptions
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  creator_address: StringSearchOptions
  hypercert_id: StringSearchOptions
  id: StringSearchOptions
  last_update_block_number: BigIntSearchOptions
  last_update_block_timestamp: BigIntSearchOptions
  sales_count: NumberSearchOptions
  token_id: BigIntSearchOptions
  units: BigIntSearchOptions
  uri: StringSearchOptions
}

input CollectionSortOptions {
  created_at: SortOrder = null
  description: SortOrder = null
  id: SortOrder = null
  name: SortOrder = null
}

input CollectionUserWhereInput {
  address: StringSearchOptions
  chain_id: NumberSearchOptions
  display_name: StringSearchOptions
  id: StringSearchOptions
}

input CollectionWhereInput {
  admins: CollectionUserWhereInput = {}
  blueprints: CollectionBlueprintWhereInput = {}
  created_at: StringSearchOptions
  description: StringSearchOptions
  hypercerts: CollectionHypercertWhereInput = {}
  id: StringSearchOptions
  name: StringSearchOptions
}

"""Pointer to a contract deployed on a chain"""
type Contract {
  """The ID of the chain on which the contract is deployed"""
  chain_id: EthBigInt

  """The address of the contract"""
  contract_address: String
  id: ID

  """The block number at which the contract was deployed"""
  start_block: EthBigInt
}

input ContractSortOptions {
  chain_id: SortOrder = null
  contract_address: SortOrder = null
  id: SortOrder = null
}

input ContractWhereInput {
  chain_id: BigIntSearchOptions
  contract_address: StringSearchOptions
  id: StringSearchOptions
}

"""Handles uint256 bigint values stored in DB"""
scalar EthBigInt

"""Fraction of an hypercert"""
type Fraction {
  """Whether the fraction has been burned"""
  burned: Boolean

  """The ID of the claims"""
  claims_id: String

  """Block number of the creation of the fraction"""
  creation_block_number: EthBigInt

  """Timestamp of the block of the creation of the fraction"""
  creation_block_timestamp: EthBigInt

  """
  The ID of the fraction concatenated from the chain ID, contract address, and token ID of the fraction
  """
  fraction_id: ID

  """
  The ID of the fraction concatenated from the chain ID, contract address, and ID of the hypercert claim
  """
  hypercert_id: ID
  id: ID

  """Block number of the last update of the fraction"""
  last_update_block_number: EthBigInt

  """Timestamp of the block of the last update of the fraction"""
  last_update_block_timestamp: EthBigInt

  """The metadata for the fraction"""
  metadata: Metadata

  """Marketplace orders related to this fraction"""
  orders: GetOrdersResponse

  """Address of the owner of the fractions"""
  owner_address: String

  """Sales related to this fraction"""
  sales: GetSalesResponse

  """The token ID of the fraction"""
  token_id: EthBigInt

  """Units held by the fraction"""
  units: EthBigInt
}

input FractionMetadataWhereInput {
  allow_list_uri: StringSearchOptions
  contributors: StringArraySearchOptions
  description: StringSearchOptions
  external_url: StringSearchOptions
  id: StringSearchOptions
  impact_scope: StringArraySearchOptions
  impact_timeframe_from: BigIntSearchOptions
  impact_timeframe_to: BigIntSearchOptions
  name: StringSearchOptions
  rights: StringArraySearchOptions
  uri: StringSearchOptions
  work_scope: StringArraySearchOptions
  work_timeframe_from: BigIntSearchOptions
  work_timeframe_to: BigIntSearchOptions
}

input FractionSortOptions {
  burned: SortOrder = null
  creation_block_number: SortOrder = null
  creation_block_timestamp: SortOrder = null
  fraction_id: SortOrder = null
  hypercert_id: SortOrder = null
  id: SortOrder = null
  last_update_block_number: SortOrder = null
  last_update_block_timestamp: SortOrder = null
  owner_address: SortOrder = null
  token_id: SortOrder = null
  units: SortOrder = null
}

input FractionWhereInput {
  burned: BooleanSearchOptions
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  fraction_id: StringSearchOptions
  hypercert_id: StringSearchOptions
  id: StringSearchOptions
  last_update_block_number: BigIntSearchOptions
  last_update_block_timestamp: BigIntSearchOptions
  metadata: FractionMetadataWhereInput = {}
  owner_address: StringSearchOptions
  token_id: BigIntSearchOptions
  units: BigIntSearchOptions
}

type GetAllowlistRecordResponse {
  count: Int
  data: [AllowlistRecord!]
}

type GetAttestationsResponse {
  count: Int
  data: [Attestation!]
}

type GetAttestationsSchemaResponse {
  count: Int
  data: [AttestationSchema!]
}

"""Blueprints for hypercert creation"""
type GetBlueprintsResponse {
  count: Int
  data: [Blueprint!]
}

"""Collection of hypercerts for reference and display purposes"""
type GetCollectionsResponse {
  count: Int
  data: [Collection!]
}

type GetContractsResponse {
  count: Int
  data: [Contract!]
}

type GetFractionsResponse {
  count: Int
  data: [Fraction!]
}

type GetHyperboardOwnersResponse {
  count: Int
  data: [HyperboardOwner!]
}

type GetHyperboardsResponse {
  count: Int
  data: [Hyperboard!]
}

"""
Hypercert with metadata, contract, orders, sales and fraction information
"""
type GetHypercertsResponse {
  count: Int
  data: [Hypercert!]
}

type GetMetadataResponse {
  count: Int
  data: [Metadata!]
}

"""
Hypercert with metadata, contract, orders, sales and fraction information
"""
type GetOrdersForHypercertResponse {
  cheapestOrder: Order
  count: Int
  data: [Order!]
  totalUnitsForSale: BigInt
}

type GetOrdersResponse {
  count: Int
  data: [Order!]
}

type GetSalesResponse {
  count: Int
  data: [Sale!]
}

type GetSectionEntryOwnersResponse {
  count: Int
  data: [SectionEntryOwner!]
}

type GetSectionsResponse {
  count: Int
  data: [Section!]
}

type GetSignatureRequestResponse {
  count: Int
  data: [SignatureRequest!]
}

type GetUsersResponse {
  count: Int
  data: [User!]
}

"""Hyperboard of hypercerts for reference and display purposes"""
type Hyperboard {
  admins: GetUsersResponse!

  """Background image of the hyperboard"""
  background_image: String

  """Chain ID of the hyperboard"""
  chain_ids: [EthBigInt!]

  """Whether the hyperboard should be rendered as a grayscale image"""
  grayscale_images: Boolean
  id: ID

  """Name of the hyperboard"""
  name: String!
  owners: GetHyperboardOwnersResponse!
  sections: GetSectionsResponse!

  """Color of the borders of the hyperboard"""
  tile_border_color: String
}

input HyperboardCollectionWhereInput {
  created_at: StringSearchOptions
  description: StringSearchOptions
  id: StringSearchOptions
  name: StringSearchOptions
}

type HyperboardOwner {
  """The address of the user"""
  address: String!

  """The avatar of the user"""
  avatar: String

  """The chain ID of the user"""
  chain_id: EthBigInt

  """The display name of the user"""
  display_name: String
  id: ID
  percentage_owned: Float!

  """Pending signature requests for the user"""
  signature_requests: GetSignatureRequestResponse
}

input HyperboardSortOptions {
  admin_address: SortOrder = null
  chain_ids: SortOrder = null
  id: SortOrder = null
}

input HyperboardUserWhereInput {
  address: StringSearchOptions
  chain_id: NumberSearchOptions
  display_name: StringSearchOptions
  id: StringSearchOptions
}

input HyperboardWhereInput {
  admin_address: StringSearchOptions
  admins: HyperboardUserWhereInput = {}
  chain_ids: NumberArraySearchOptions
  collections: HyperboardCollectionWhereInput = {}
  id: StringSearchOptions
}

"""
Hypercert with metadata, contract, orders, sales and fraction information
"""
type Hypercert {
  """Attestations for the hypercert or parts of its data"""
  attestations: GetAttestationsResponse

  """Count of attestations referencing this hypercert"""
  attestations_count: Int

  """Whether the hypercert has been burned"""
  burned: Boolean

  """The contract that the hypercert is associated with"""
  contract: Contract

  """The UUID of the contract as stored in the database"""
  contracts_id: ID
  creation_block_number: EthBigInt
  creation_block_timestamp: EthBigInt

  """The address of the creator of the hypercert"""
  creator_address: String

  """Transferable fractions representing partial ownership of the hypercert"""
  fractions: GetFractionsResponse

  """
  Concatenation of [chainID]-[contractAddress]-[tokenID] to discern hypercerts across chains
  """
  hypercert_id: ID
  id: ID
  last_update_block_number: EthBigInt
  last_update_block_timestamp: EthBigInt

  """The metadata for the hypercert as referenced by the uri"""
  metadata: Metadata

  """Marketplace orders related to this hypercert"""
  orders: GetOrdersForHypercertResponse

  """Sales related to this hypercert"""
  sales: GetSalesResponse

  """Count of sales of fractions that belong to this hypercert"""
  sales_count: Int

  """The token ID of the hypercert"""
  token_id: EthBigInt

  """The total units held by the hypercert"""
  units: EthBigInt

  """References the metadata for this claim"""
  uri: String
}

input HypercertAttestationWhereInput {
  attester: StringSearchOptions
  contract_address: StringSearchOptions
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  id: StringSearchOptions
  last_update_block_number: BigIntSearchOptions
  last_update_block_timestamp: BigIntSearchOptions
  recipient: StringSearchOptions
  resolver: StringSearchOptions
  supported_schemas_id: StringSearchOptions
  uid: StringSearchOptions
}

type HypercertBaseType {
  """Count of attestations referencing this hypercert"""
  attestations_count: Int

  """Whether the hypercert has been burned"""
  burned: Boolean

  """The UUID of the contract as stored in the database"""
  contracts_id: ID
  creation_block_number: EthBigInt
  creation_block_timestamp: EthBigInt

  """The address of the creator of the hypercert"""
  creator_address: String

  """
  Concatenation of [chainID]-[contractAddress]-[tokenID] to discern hypercerts across chains
  """
  hypercert_id: ID
  id: ID
  last_update_block_number: EthBigInt
  last_update_block_timestamp: EthBigInt

  """Count of sales of fractions that belong to this hypercert"""
  sales_count: Int

  """The token ID of the hypercert"""
  token_id: EthBigInt

  """The total units held by the hypercert"""
  units: EthBigInt

  """References the metadata for this claim"""
  uri: String
}

input HypercertContractWhereInput {
  chain_id: BigIntSearchOptions
  contract_address: StringSearchOptions
  id: StringSearchOptions
}

input HypercertFractionWhereInput {
  burned: BooleanSearchOptions
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  fraction_id: StringSearchOptions
  hypercert_id: StringSearchOptions
  id: StringSearchOptions
  last_update_block_number: BigIntSearchOptions
  last_update_block_timestamp: BigIntSearchOptions
  owner_address: StringSearchOptions
  token_id: BigIntSearchOptions
  units: BigIntSearchOptions
}

input HypercertMetadataWhereInput {
  allow_list_uri: StringSearchOptions
  contributors: StringArraySearchOptions
  description: StringSearchOptions
  external_url: StringSearchOptions
  id: StringSearchOptions
  impact_scope: StringArraySearchOptions
  impact_timeframe_from: BigIntSearchOptions
  impact_timeframe_to: BigIntSearchOptions
  name: StringSearchOptions
  rights: StringArraySearchOptions
  uri: StringSearchOptions
  work_scope: StringArraySearchOptions
  work_timeframe_from: BigIntSearchOptions
  work_timeframe_to: BigIntSearchOptions
}

input HypercertSortOptions {
  attestations_count: SortOrder = null
  burned: SortOrder = null
  creation_block_number: SortOrder = null
  creation_block_timestamp: SortOrder = null
  creator_address: SortOrder = null
  hypercert_id: SortOrder = null
  id: SortOrder = null
  last_update_block_number: SortOrder = null
  last_update_block_timestamp: SortOrder = null
  sales_count: SortOrder = null
  token_id: SortOrder = null
  units: SortOrder = null
  uri: SortOrder = null
}

input HypercertWhereInput {
  attestations: HypercertAttestationWhereInput = {}
  attestations_count: NumberSearchOptions
  burned: BooleanSearchOptions
  contract: HypercertContractWhereInput = {}
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  creator_address: StringSearchOptions
  fractions: HypercertFractionWhereInput = {}
  hypercert_id: StringSearchOptions
  id: StringSearchOptions
  last_update_block_number: BigIntSearchOptions
  last_update_block_timestamp: BigIntSearchOptions
  metadata: HypercertMetadataWhereInput = {}
  sales_count: NumberSearchOptions
  token_id: BigIntSearchOptions
  units: BigIntSearchOptions
  uri: StringSearchOptions
}

"""
Hypercert with metadata, contract, orders, sales and fraction information
"""
type HypercertWithMetadata {
  """Count of attestations referencing this hypercert"""
  attestations_count: Int

  """Whether the hypercert has been burned"""
  burned: Boolean

  """The UUID of the contract as stored in the database"""
  contracts_id: ID
  creation_block_number: EthBigInt
  creation_block_timestamp: EthBigInt

  """The address of the creator of the hypercert"""
  creator_address: String

  """
  Concatenation of [chainID]-[contractAddress]-[tokenID] to discern hypercerts across chains
  """
  hypercert_id: ID
  id: ID
  last_update_block_number: EthBigInt
  last_update_block_timestamp: EthBigInt

  """The metadata for the hypercert as referenced by the uri"""
  metadata: Metadata

  """Count of sales of fractions that belong to this hypercert"""
  sales_count: Int

  """The token ID of the hypercert"""
  token_id: EthBigInt

  """The total units held by the hypercert"""
  units: EthBigInt

  """References the metadata for this claim"""
  uri: String
}

"""
Hypercert without metadata, contract, orders, sales and fraction information
"""
type HypercertsResponse {
  count: Int
  data: [HypercertBaseType!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
Metadata related to the hypercert describing work, impact, timeframes and other relevant information
"""
type Metadata {
  """URI of the allow list for the hypercert"""
  allow_list_uri: String

  """Contributors to the work and impact of the hypercert"""
  contributors: [String!]

  """Description of the hypercert"""
  description: String

  """References additional information related to the hypercert"""
  external_url: String
  id: ID
  image: String!

  """Impact scope of the hypercert"""
  impact_scope: [String!]

  """Timestamp of the start of the impact (in seconds)"""
  impact_timeframe_from: EthBigInt

  """Timestamp of the end of the impact (in seconds)"""
  impact_timeframe_to: EthBigInt

  """Name of the hypercert"""
  name: String

  """Properties of the hypercert"""
  properties: JSON

  """Rights of the hypercert"""
  rights: [String!]

  """URI of the hypercert metadata"""
  uri: String

  """Work scope of the hypercert"""
  work_scope: [String!]

  """Timestamp of the start of the work (in seconds)"""
  work_timeframe_from: EthBigInt

  """Timestamp of the end of the work (in seconds)"""
  work_timeframe_to: EthBigInt
}

input MetadataHypercertWhereInput {
  attestations_count: NumberSearchOptions
  burned: BooleanSearchOptions
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  creator_address: StringSearchOptions
  hypercert_id: StringSearchOptions
  id: StringSearchOptions
  last_update_block_number: BigIntSearchOptions
  last_update_block_timestamp: BigIntSearchOptions
  sales_count: NumberSearchOptions
  token_id: BigIntSearchOptions
  units: BigIntSearchOptions
  uri: StringSearchOptions
}

input MetadataSortOptions {
  allow_list_uri: SortOrder = null
  contributors: SortOrder = null
  description: SortOrder = null
  external_url: SortOrder = null
  id: SortOrder = null
  impact_scope: SortOrder = null
  impact_timeframe_from: SortOrder = null
  impact_timeframe_to: SortOrder = null
  name: SortOrder = null
  rights: SortOrder = null
  uri: SortOrder = null
  work_scope: SortOrder = null
  work_timeframe_from: SortOrder = null
  work_timeframe_to: SortOrder = null
}

input MetadataWhereInput {
  allow_list_uri: StringSearchOptions
  contributors: StringArraySearchOptions
  description: StringSearchOptions
  external_url: StringSearchOptions
  hypercert: MetadataHypercertWhereInput = {}
  id: StringSearchOptions
  impact_scope: StringArraySearchOptions
  impact_timeframe_from: BigIntSearchOptions
  impact_timeframe_to: BigIntSearchOptions
  name: StringSearchOptions
  rights: StringArraySearchOptions
  uri: StringSearchOptions
  work_scope: StringArraySearchOptions
  work_timeframe_from: BigIntSearchOptions
  work_timeframe_to: BigIntSearchOptions
}

input NumberArraySearchOptions {
  """Array of numbers"""
  arrayContains: [BigInt!]

  """Array of numbers"""
  arrayOverlaps: [BigInt!]
}

input NumberSearchOptions {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
}

"""Marketplace order for a hypercert"""
type Order {
  additionalParameters: String!
  amounts: [Float!]!
  chainId: EthBigInt!
  collection: String!
  collectionType: Float!
  createdAt: Float!
  currency: String!
  endTime: Float!
  globalNonce: String!

  """The hypercert associated with this order"""
  hypercert: HypercertWithMetadata
  hypercert_id: String!
  id: ID
  invalidated: Boolean!
  itemIds: [String!]!
  orderNonce: String!
  price: String!
  pricePerPercentInToken: String!
  pricePerPercentInUSD: String!
  quoteType: Float!
  signature: String!
  signer: String!
  startTime: Float!
  strategyId: Float!
  subsetNonce: Float!
  validator_codes: [Int!]
}

input OrderHypercertWhereInput {
  attestations_count: NumberSearchOptions
  burned: BooleanSearchOptions
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  creator_address: StringSearchOptions
  hypercert_id: StringSearchOptions
  id: StringSearchOptions
  last_update_block_number: BigIntSearchOptions
  last_update_block_timestamp: BigIntSearchOptions
  sales_count: NumberSearchOptions
  token_id: BigIntSearchOptions
  units: BigIntSearchOptions
  uri: StringSearchOptions
}

input OrderSortOptions {
  amounts: SortOrder = null
  chainId: SortOrder = null
  collection: SortOrder = null
  collectionType: SortOrder = null
  createdAt: SortOrder = null
  currency: SortOrder = null
  endTime: SortOrder = null
  globalNonce: SortOrder = null
  hypercert_id: SortOrder = null
  id: SortOrder = null
  invalidated: SortOrder = null
  itemIds: SortOrder = null
  orderNonce: SortOrder = null
  price: SortOrder = null
  quoteType: SortOrder = null
  signer: SortOrder = null
  startTime: SortOrder = null
  strategyId: SortOrder = null
  subsetNonce: SortOrder = null
}

input OrderWhereInput {
  amounts: NumberArraySearchOptions
  chainId: BigIntSearchOptions
  collection: StringSearchOptions
  collectionType: NumberSearchOptions
  createdAt: StringSearchOptions
  currency: StringSearchOptions
  endTime: NumberSearchOptions
  globalNonce: StringSearchOptions
  hypercert: OrderHypercertWhereInput = {}
  hypercert_id: StringSearchOptions
  id: StringSearchOptions
  invalidated: BooleanSearchOptions
  itemIds: StringArraySearchOptions
  orderNonce: StringSearchOptions
  price: StringSearchOptions
  quoteType: NumberSearchOptions
  signer: StringSearchOptions
  startTime: NumberSearchOptions
  strategyId: NumberSearchOptions
  subsetNonce: NumberSearchOptions
}

type Query {
  allowlistRecords(first: Int, offset: Int, sortBy: AllowlistRecordSortOptions, where: AllowlistRecordWhereInput): GetAllowlistRecordResponse!
  attestationSchemas(first: Int, offset: Int, sortBy: AttestationSchemaSortOptions, where: AttestationSchemaWhereInput): GetAttestationsSchemaResponse!
  attestations(first: Int, offset: Int, sortBy: AttestationSortOptions, where: AttestationWhereInput): GetAttestationsResponse!
  blueprints(first: Int, offset: Int, sortBy: BlueprintSortOptions, where: BlueprintWhereInput): GetBlueprintsResponse!
  collections(first: Int, offset: Int, sortBy: CollectionSortOptions, where: CollectionWhereInput): GetCollectionsResponse!
  contracts(first: Int, offset: Int, sortBy: ContractSortOptions, where: ContractWhereInput): GetContractsResponse!
  fractions(first: Int, offset: Int, sortBy: FractionSortOptions, where: FractionWhereInput): GetFractionsResponse!
  hyperboards(first: Int, offset: Int, sortBy: HyperboardSortOptions, where: HyperboardWhereInput): GetHyperboardsResponse!
  hypercerts(first: Int, offset: Int, sortBy: HypercertSortOptions, where: HypercertWhereInput): GetHypercertsResponse!
  metadata(first: Int, offset: Int, sortBy: MetadataSortOptions, where: MetadataWhereInput): GetMetadataResponse!
  orders(first: Int, offset: Int, sortBy: OrderSortOptions, where: OrderWhereInput): GetOrdersResponse!
  sales(first: Int, offset: Int, sortBy: SaleSortOptions, where: SaleWhereInput): GetSalesResponse!
  signatureRequests(first: Int, offset: Int, sortBy: SignatureRequestSortOptions, where: SignatureRequestWhereInput): GetSignatureRequestResponse!
  users(first: Int, offset: Int, sortBy: UserSortOptions, where: UserWhereInput): GetUsersResponse!
}

type Sale {
  """Number of units sold for each fraction"""
  amounts: [EthBigInt!]

  """The address of the buyer"""
  buyer: String!

  """The address of the contract minting the tradable fractions"""
  collection: String!

  """The block number of the transaction creating the sale"""
  creation_block_number: EthBigInt

  """The timestamp of the block creating the sale"""
  creation_block_timestamp: EthBigInt

  """The address of the token accepted for this order"""
  currency: String!
  currency_amount: EthBigInt!

  """The hypercert associated with this order"""
  hypercert: HypercertWithMetadata

  """The ID of the hypercert token referenced in the order"""
  hypercert_id: String
  id: ID

  """Token ids of the sold fractions"""
  item_ids: [EthBigInt!]

  """The address of the seller"""
  seller: String!

  """The ID of the strategy registered with the exchange contracts"""
  strategy_id: EthBigInt

  """The transactions hash of the sale"""
  transaction_hash: String!
}

input SaleHypercertWhereInput {
  attestations_count: NumberSearchOptions
  burned: BooleanSearchOptions
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  creator_address: StringSearchOptions
  hypercert_id: StringSearchOptions
  id: StringSearchOptions
  last_update_block_number: BigIntSearchOptions
  last_update_block_timestamp: BigIntSearchOptions
  sales_count: NumberSearchOptions
  token_id: BigIntSearchOptions
  units: BigIntSearchOptions
  uri: StringSearchOptions
}

input SaleSortOptions {
  amounts: SortOrder = null
  buyer: SortOrder = null
  collection: SortOrder = null
  creation_block_number: SortOrder = null
  creation_block_timestamp: SortOrder = null
  currency: SortOrder = null
  hypercert_id: SortOrder = null
  id: SortOrder = null
  item_ids: SortOrder = null
  seller: SortOrder = null
  strategy_id: SortOrder = null
  transaction_hash: SortOrder = null
}

input SaleWhereInput {
  amounts: NumberArraySearchOptions
  buyer: StringSearchOptions
  collection: StringSearchOptions
  creation_block_number: BigIntSearchOptions
  creation_block_timestamp: BigIntSearchOptions
  currency: StringSearchOptions
  hypercert: SaleHypercertWhereInput = {}
  hypercert_id: StringSearchOptions
  id: StringSearchOptions
  item_ids: StringArraySearchOptions
  seller: StringSearchOptions
  strategy_id: NumberSearchOptions
  transaction_hash: StringSearchOptions
}

"""Section representing one or more collectionswithin a hyperboard"""
type Section {
  collections: [Collection!]!
  entries: [SectionEntry!]!
  label: String!
  owners: GetHyperboardOwnersResponse!
}

"""Entry representing a hypercert or blueprint within a section"""
type SectionEntry {
  display_size: Float!

  """ID of the hypercert or blueprint"""
  id: String!
  is_blueprint: Boolean!

  """Name of the hypercert or blueprint"""
  name: String
  owners: GetSectionEntryOwnersResponse!
  percentage_of_section: Float!
  total_units: EthBigInt
}

type SectionEntryOwner {
  """The address of the user"""
  address: String!

  """The avatar of the user"""
  avatar: String

  """The chain ID of the user"""
  chain_id: EthBigInt

  """The display name of the user"""
  display_name: String
  id: ID
  percentage: Float!

  """Pending signature requests for the user"""
  signature_requests: GetSignatureRequestResponse
  units: EthBigInt
}

"""Pending signature request for a user"""
type SignatureRequest {
  """The chain ID of the signature request"""
  chain_id: EthBigInt!

  """The message data in JSON format"""
  message: String!

  """The hash of the Safe message (not the message to be signed)"""
  message_hash: String!

  """The purpose of the signature request"""
  purpose: SignatureRequestPurpose!

  """The safe address of the user who needs to sign"""
  safe_address: String!

  """The status of the signature request"""
  status: SignatureRequestStatus!

  """Timestamp of when the signature request was created"""
  timestamp: EthBigInt!
}

"""Purpose of the signature request"""
enum SignatureRequestPurpose {
  UPDATE_USER_DATA
}

input SignatureRequestSortOptions {
  chain_id: SortOrder = null
  message_hash: SortOrder = null
  safe_address: SortOrder = null
  status: SortOrder = null
  timestamp: SortOrder = null
}

"""Status of the signature request"""
enum SignatureRequestStatus {
  CANCELED
  EXECUTED
  PENDING
}

input SignatureRequestStatusSearchOptions {
  eq: SignatureRequestStatus
}

input SignatureRequestWhereInput {
  chain_id: BigIntSearchOptions
  message_hash: StringSearchOptions
  safe_address: StringSearchOptions
  status: SignatureRequestStatusSearchOptions
  timestamp: BigIntSearchOptions
}

"""The direction to sort the query results"""
enum SortOrder {
  """Ascending order"""
  ascending

  """Descending order"""
  descending
}

input StringArraySearchOptions {
  """Array of strings"""
  arrayContains: [String!]

  """Array of strings"""
  arrayOverlaps: [String!]
}

input StringSearchOptions {
  contains: String
  endsWith: String
  eq: String
  in: [String!]
  startsWith: String
}

type User {
  """The address of the user"""
  address: String!

  """The avatar of the user"""
  avatar: String

  """The chain ID of the user"""
  chain_id: EthBigInt

  """The display name of the user"""
  display_name: String
  id: ID

  """Pending signature requests for the user"""
  signature_requests: GetSignatureRequestResponse
}

input UserSortOptions {
  address: SortOrder = null
  chain_id: SortOrder = null
  display_name: SortOrder = null
  id: SortOrder = null
}

input UserWhereInput {
  address: StringSearchOptions
  chain_id: NumberSearchOptions
  display_name: StringSearchOptions
  id: StringSearchOptions
}
{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Record_string.string-or-string-Array_": {
				"properties": {},
				"additionalProperties": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"items": {
								"type": "string"
							},
							"type": "array"
						}
					]
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"UserResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"errors": {
						"$ref": "#/components/schemas/Record_string.string-or-string-Array_"
					},
					"data": {
						"properties": {
							"address": {
								"type": "string"
							}
						},
						"required": [
							"address"
						],
						"type": "object"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BaseResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"errors": {
						"$ref": "#/components/schemas/Record_string.string-or-string-Array_"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EOAUserUpsertRequest": {
				"properties": {
					"chain_id": {
						"type": "number",
						"format": "double"
					},
					"type": {
						"type": "string",
						"enum": [
							"eoa"
						],
						"nullable": false
					},
					"display_name": {
						"type": "string"
					},
					"avatar": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					}
				},
				"required": [
					"chain_id",
					"type",
					"signature"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MultisigUserUpsertRequest": {
				"properties": {
					"chain_id": {
						"type": "number",
						"format": "double"
					},
					"type": {
						"type": "string",
						"enum": [
							"multisig"
						],
						"nullable": false
					},
					"messageHash": {
						"type": "string"
					}
				},
				"required": [
					"chain_id",
					"type",
					"messageHash"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AddOrUpdateUserRequest": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/EOAUserUpsertRequest"
					},
					{
						"$ref": "#/components/schemas/MultisigUserUpsertRequest"
					}
				]
			},
			"UploadStatus": {
				"type": "string",
				"enum": [
					"all",
					"some",
					"none"
				]
			},
			"Record_string.string_": {
				"properties": {},
				"additionalProperties": {
					"type": "string"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"UploadResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"uploadStatus": {
						"$ref": "#/components/schemas/UploadStatus"
					},
					"data": {
						"properties": {
							"failed": {
								"items": {
									"properties": {
										"error": {
											"type": "string"
										},
										"fileName": {
											"type": "string"
										}
									},
									"required": [
										"error",
										"fileName"
									],
									"type": "object"
								},
								"type": "array"
							},
							"results": {
								"items": {
									"properties": {
										"fileName": {
											"type": "string"
										},
										"cid": {
											"type": "string"
										}
									},
									"required": [
										"fileName",
										"cid"
									],
									"type": "object"
								},
								"type": "array"
							}
						},
						"required": [
							"failed",
							"results"
						],
						"type": "object"
					},
					"errors": {
						"$ref": "#/components/schemas/Record_string.string_"
					}
				},
				"required": [
					"success",
					"message",
					"uploadStatus"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CancelSignatureRequest": {
				"properties": {
					"signature": {
						"type": "string"
					},
					"owner_address": {
						"type": "string"
					},
					"chain_id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"signature",
					"owner_address",
					"chain_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HypercertClaimdata": {
				"description": "Properties of an impact claim",
				"properties": {
					"impact_scope": {
						"properties": {
							"display_value": {
								"type": "string"
							},
							"excludes": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"value": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Scopes of impact"
					},
					"work_scope": {
						"properties": {
							"display_value": {
								"type": "string"
							},
							"excludes": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"value": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Scopes of work"
					},
					"work_timeframe": {
						"properties": {
							"display_value": {
								"type": "string"
							},
							"value": {
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Work time period. The value is UNIX time in seconds from epoch."
					},
					"impact_timeframe": {
						"properties": {
							"display_value": {
								"type": "string"
							},
							"value": {
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Impact time period. The value is UNIX time in seconds from epoch."
					},
					"contributors": {
						"properties": {
							"display_value": {
								"type": "string"
							},
							"value": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Contributors"
					},
					"rights": {
						"properties": {
							"display_value": {
								"type": "string"
							},
							"excludes": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"value": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Rights"
					}
				},
				"required": [
					"impact_scope",
					"work_scope",
					"work_timeframe",
					"impact_timeframe",
					"contributors"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"HypercertMetadata": {
				"description": "Claim data for hypercert. ERC1155 Metadata compliant",
				"properties": {
					"name": {
						"type": "string",
						"description": "Identifies the asset to which this token represents"
					},
					"description": {
						"type": "string",
						"description": "Describes the asset to which this token represents"
					},
					"external_url": {
						"type": "string",
						"description": "An url pointing to the external website of the project"
					},
					"image": {
						"type": "string",
						"description": "A URI pointing to a resource with mime type image/* representing the asset to which this token represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive."
					},
					"version": {
						"type": "string",
						"description": "The version of Hypercert schema used to describe this hypercert"
					},
					"ref": {
						"type": "string",
						"description": "Describes the asset to which this token represents"
					},
					"allowList": {
						"type": "string",
						"description": "A CID pointer to the merke tree proof json on ipfs"
					},
					"properties": {
						"items": {
							"properties": {
								"value": {
									"type": "string"
								},
								"trait_type": {
									"type": "string"
								}
							},
							"additionalProperties": {},
							"type": "object"
						},
						"type": "array"
					},
					"hypercert": {
						"$ref": "#/components/schemas/HypercertClaimdata"
					}
				},
				"required": [
					"name",
					"description",
					"image"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StoreMetadataRequest": {
				"properties": {
					"metadata": {
						"$ref": "#/components/schemas/HypercertMetadata"
					}
				},
				"required": [
					"metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StorageResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"errors": {
						"$ref": "#/components/schemas/Record_string.string-or-string-Array_"
					},
					"data": {
						"properties": {
							"cid": {
								"type": "string"
							}
						},
						"required": [
							"cid"
						],
						"type": "object"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StoreMetadataWithAllowlistRequest": {
				"properties": {
					"metadata": {
						"$ref": "#/components/schemas/HypercertMetadata"
					},
					"allowList": {
						"type": "string"
					},
					"totalUnits": {
						"type": "string"
					}
				},
				"required": [
					"metadata",
					"allowList"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidationResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"errors": {
						"$ref": "#/components/schemas/Record_string.string-or-string-Array_"
					},
					"valid": {
						"type": "boolean"
					},
					"data": {}
				},
				"required": [
					"success",
					"valid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidateMetadataRequest": {
				"properties": {
					"metadata": {
						"$ref": "#/components/schemas/HypercertMetadata"
					}
				},
				"required": [
					"metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OrderValidatorCode": {
				"description": "Error errors returned by the order validator contract",
				"enum": [
					0,
					101,
					111,
					112,
					113,
					201,
					211,
					212,
					213,
					301,
					311,
					312,
					321,
					322,
					401,
					402,
					411,
					412,
					413,
					414,
					415,
					421,
					422,
					501,
					502,
					503,
					601,
					611,
					612,
					621,
					622,
					623,
					631,
					632,
					633,
					634,
					701,
					702,
					801,
					802,
					901,
					902
				],
				"type": "number"
			},
			"Pick__additionalParameters-string--amounts-number-Array--chainId-number--collection-string--collectionType-number--createdAt-string--currency-string--endTime-number--globalNonce-string--id-string--invalidated-boolean--itemIds-string-Array--orderNonce-string--price-string--quoteType-number--signature-string--signer-string--startTime-number--strategyId-number--subsetNonce-number--validator_codes-number-Array_.Exclude_keyof_additionalParameters-string--amounts-number-Array--chainId-number--collection-string--collectionType-number--createdAt-string--currency-string--endTime-number--globalNonce-string--id-string--invalidated-boolean--itemIds-string-Array--orderNonce-string--price-string--quoteType-number--signature-string--signer-string--startTime-number--strategyId-number--subsetNonce-number--validator_codes-number-Array_.id-or-createdAt-or-invalidated-or-validator_codes__": {
				"properties": {},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit__additionalParameters-string--amounts-number-Array--chainId-number--collection-string--collectionType-number--createdAt-string--currency-string--endTime-number--globalNonce-string--id-string--invalidated-boolean--itemIds-string-Array--orderNonce-string--price-string--quoteType-number--signature-string--signer-string--startTime-number--strategyId-number--subsetNonce-number--validator_codes-number-Array_.id-or-createdAt-or-invalidated-or-validator_codes_": {
				"$ref": "#/components/schemas/Pick__additionalParameters-string--amounts-number-Array--chainId-number--collection-string--collectionType-number--createdAt-string--currency-string--endTime-number--globalNonce-string--id-string--invalidated-boolean--itemIds-string-Array--orderNonce-string--price-string--quoteType-number--signature-string--signer-string--startTime-number--strategyId-number--subsetNonce-number--validator_codes-number-Array_.Exclude_keyof_additionalParameters-string--amounts-number-Array--chainId-number--collection-string--collectionType-number--createdAt-string--currency-string--endTime-number--globalNonce-string--id-string--invalidated-boolean--itemIds-string-Array--orderNonce-string--price-string--quoteType-number--signature-string--signer-string--startTime-number--strategyId-number--subsetNonce-number--validator_codes-number-Array_.id-or-createdAt-or-invalidated-or-validator_codes__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateOrderRequest": {
				"properties": {
					"signature": {
						"type": "string"
					},
					"chainId": {
						"type": "number",
						"format": "double"
					},
					"quoteType": {
						"type": "number",
						"format": "double"
					},
					"globalNonce": {
						"type": "string"
					},
					"subsetNonce": {
						"type": "number",
						"format": "double"
					},
					"orderNonce": {
						"type": "string"
					},
					"strategyId": {
						"type": "number",
						"format": "double"
					},
					"collectionType": {
						"type": "number",
						"format": "double"
					},
					"collection": {
						"type": "string"
					},
					"currency": {
						"type": "string"
					},
					"signer": {
						"type": "string"
					},
					"startTime": {
						"type": "number",
						"format": "double"
					},
					"endTime": {
						"type": "number",
						"format": "double"
					},
					"price": {
						"type": "string"
					},
					"itemIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"amounts": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"additionalParameters": {
						"type": "string"
					}
				},
				"required": [
					"signature",
					"chainId",
					"quoteType",
					"globalNonce",
					"subsetNonce",
					"orderNonce",
					"strategyId",
					"collectionType",
					"collection",
					"currency",
					"signer",
					"startTime",
					"endTime",
					"price",
					"itemIds",
					"amounts",
					"additionalParameters"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateOrderNonceRequest": {
				"properties": {
					"address": {
						"type": "string"
					},
					"chainId": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"address",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidateOrderRequest": {
				"properties": {
					"tokenIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"chainId": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"tokenIds",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HyperboardResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"errors": {
						"$ref": "#/components/schemas/Record_string.string-or-string-Array_"
					},
					"data": {
						"properties": {
							"id": {
								"type": "string"
							}
						},
						"required": [
							"id"
						],
						"type": "object"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HyperboardCreateRequest": {
				"properties": {
					"chainIds": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"title": {
						"type": "string"
					},
					"collections": {
						"items": {
							"properties": {
								"hypercerts": {
									"items": {
										"properties": {
											"factor": {
												"type": "number",
												"format": "double"
											},
											"hypercertId": {
												"type": "string"
											}
										},
										"required": [
											"factor",
											"hypercertId"
										],
										"type": "object"
									},
									"type": "array"
								},
								"blueprints": {
									"items": {
										"properties": {
											"factor": {
												"type": "number",
												"format": "double"
											},
											"blueprintId": {
												"type": "number",
												"format": "double"
											}
										},
										"required": [
											"factor",
											"blueprintId"
										],
										"type": "object"
									},
									"type": "array"
								},
								"description": {
									"type": "string"
								},
								"title": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							},
							"required": [
								"hypercerts",
								"blueprints",
								"description",
								"title"
							],
							"type": "object"
						},
						"type": "array"
					},
					"backgroundImg": {
						"type": "string"
					},
					"borderColor": {
						"type": "string"
					},
					"adminAddress": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					}
				},
				"required": [
					"chainIds",
					"title",
					"collections",
					"borderColor",
					"adminAddress",
					"signature"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HyperboardUpdateRequest": {
				"properties": {
					"chainIds": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"title": {
						"type": "string"
					},
					"collections": {
						"items": {
							"properties": {
								"hypercerts": {
									"items": {
										"properties": {
											"factor": {
												"type": "number",
												"format": "double"
											},
											"hypercertId": {
												"type": "string"
											}
										},
										"required": [
											"factor",
											"hypercertId"
										],
										"type": "object"
									},
									"type": "array"
								},
								"blueprints": {
									"items": {
										"properties": {
											"factor": {
												"type": "number",
												"format": "double"
											},
											"blueprintId": {
												"type": "number",
												"format": "double"
											}
										},
										"required": [
											"factor",
											"blueprintId"
										],
										"type": "object"
									},
									"type": "array"
								},
								"description": {
									"type": "string"
								},
								"title": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							},
							"required": [
								"hypercerts",
								"blueprints",
								"description",
								"title"
							],
							"type": "object"
						},
						"type": "array"
					},
					"backgroundImg": {
						"type": "string"
					},
					"borderColor": {
						"type": "string"
					},
					"adminAddress": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					},
					"id": {
						"type": "string"
					}
				},
				"required": [
					"chainIds",
					"title",
					"collections",
					"borderColor",
					"adminAddress",
					"signature",
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BlueprintResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"errors": {
						"$ref": "#/components/schemas/Record_string.string-or-string-Array_"
					},
					"data": {
						"properties": {
							"blueprint_id": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"blueprint_id"
						],
						"type": "object"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BlueprintCreateRequest": {
				"properties": {
					"form_values": {},
					"minter_address": {
						"type": "string"
					},
					"admin_address": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					},
					"chain_id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"form_values",
					"minter_address",
					"admin_address",
					"signature",
					"chain_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BlueprintDeleteRequest": {
				"properties": {
					"signature": {
						"type": "string"
					},
					"chain_id": {
						"type": "number",
						"format": "double"
					},
					"admin_address": {
						"type": "string"
					}
				},
				"required": [
					"signature",
					"chain_id",
					"admin_address"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BlueprintQueueMintRequest": {
				"properties": {
					"signature": {
						"type": "string"
					},
					"chain_id": {
						"type": "number",
						"format": "double"
					},
					"minter_address": {
						"type": "string"
					},
					"tx_hash": {
						"type": "string"
					}
				},
				"required": [
					"signature",
					"chain_id",
					"minter_address",
					"tx_hash"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StoreAllowListRequest": {
				"properties": {
					"allowList": {
						"type": "string"
					},
					"totalUnits": {
						"type": "string"
					}
				},
				"required": [
					"allowList"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidateAllowListRequest": {
				"properties": {
					"allowList": {
						"type": "string"
					},
					"totalUnits": {
						"type": "string"
					}
				},
				"required": [
					"allowList"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "Hypercerts API",
		"version": "1.0.0",
		"description": "API for uploading allow lists and hypercert metadata. Visit /graphql for the GraphQL API.",
		"contact": {
			"url": "https://hypercerts.org"
		}
	},
	"paths": {
		"/v1/users/{address}": {
			"post": {
				"operationId": "AddOrUpdateUser",
				"responses": {
					"201": {
						"description": "User updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Errors while validating user"
										}
									}
								}
							}
						}
					}
				},
				"description": "Add or update a user",
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddOrUpdateUserRequest"
							},
							"examples": {
								"Example 1": {
									"value": {
										"type": "eoa",
										"chain_id": 11155111,
										"display_name": "Dana's Profile",
										"avatar": "https://example.com/avatar.png",
										"signature": "0x1234567890abcdef"
									}
								},
								"Example 2": {
									"value": {
										"type": "multisig",
										"chain_id": 11155111,
										"messageHash": "0x1234567890abcdef"
									}
								}
							}
						}
					}
				}
			}
		},
		"/v1/upload": {
			"post": {
				"operationId": "Upload",
				"responses": {
					"201": {
						"description": "Upload successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UploadResponse"
								}
							}
						}
					}
				},
				"description": "Upload one or more files to IPFS storage.",
				"summary": "Upload files to IPFS",
				"tags": [
					"Upload"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": false,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"files": {
										"items": {
											"type": "string",
											"format": "binary"
										},
										"type": "array",
										"description": "- Array of files to upload (max 5 files, 10MB each)"
									},
									"jsonData": {
										"type": "string",
										"description": "- Optional JSON string with additional metadata"
									}
								}
							}
						}
					}
				}
			}
		},
		"/v1/signature-requests/{safe_address}-{message_hash}/cancel": {
			"post": {
				"operationId": "CancelSignatureRequest",
				"responses": {
					"200": {
						"description": "Signature request canceled successfully",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"message",
										"success"
									],
									"type": "object"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized"
					},
					"404": {
						"description": "Signature request not found"
					}
				},
				"tags": [
					"SignatureRequests"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "safe_address",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "message_hash",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CancelSignatureRequest"
							}
						}
					}
				}
			}
		},
		"/v1/signature-requests/process": {
			"post": {
				"operationId": "ProcessSignatureRequests",
				"responses": {
					"200": {
						"description": "Signature requests processing started",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"message",
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"SignatureRequests"
				],
				"security": [],
				"parameters": []
			}
		},
		"/v1/metadata": {
			"post": {
				"operationId": "StoreMetadata",
				"responses": {
					"201": {
						"description": "Data uploaded successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"data": {},
												"errors": {},
												"message": {
													"type": "string"
												},
												"valid": {
													"type": "boolean"
												},
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"errors",
												"message",
												"valid",
												"success"
											],
											"type": "object"
										},
										{
											"properties": {
												"errors": {},
												"message": {},
												"valid": {},
												"data": {
													"properties": {
														"cid": {
															"type": "string"
														}
													},
													"required": [
														"cid"
													],
													"type": "object"
												},
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"data",
												"success"
											],
											"type": "object"
										},
										{
											"properties": {
												"data": {},
												"valid": {},
												"errors": {
													"properties": {
														"metadata": {
															"type": "string"
														}
													},
													"required": [
														"metadata"
													],
													"type": "object"
												},
												"message": {
													"type": "string"
												},
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"errors",
												"message",
												"success"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Validation failed",
											"errors": {
												"metadata": "Invalid metadata."
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Submits a new hypercert metadata object for validation and storage on IPFS.\nWhen an allowlist URI is provided the service will validate the allowlist data before storing the metadata.\nNote that this might lead to a race condition when uploading metadata and the allowlist separately in rapid succession.\nIn that case we recommend using POST /metadata/with-allowlist instead.",
				"tags": [
					"Metadata"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The metadata object to be stored.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/StoreMetadataRequest",
								"description": "The metadata object to be stored."
							}
						}
					}
				}
			}
		},
		"/v1/metadata/with-allowlist": {
			"post": {
				"operationId": "StoreMetadataWithAllowlist",
				"responses": {
					"201": {
						"description": "Data uploaded successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StorageResponse"
								}
							}
						}
					},
					"409": {
						"description": "Conflict",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Allow list detected in metadata",
											"errors": {
												"metadata": "Allowlist URI already present in metadata."
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Validation failed",
											"errors": {
												"metadata": "Invalid metadata."
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Submits a new hypercert metadata object paired with allowlist data for validation and storage on IPFS.\nThe service will parse and validate the allow list data and the metadata.\nAfter successful validation, the allow list data will be uploaded to IPFS and the URI of the allowlist will be attached to the hypercert metadata.\nIf an allow list URI is already present, the service will return an error.",
				"tags": [
					"Metadata"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The metadata object and allowlist data to be stored.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/StoreMetadataWithAllowlistRequest",
								"description": "The metadata object and allowlist data to be stored."
							}
						}
					}
				}
			}
		},
		"/v1/metadata/validate": {
			"post": {
				"operationId": "ValidateMetadata",
				"responses": {
					"200": {
						"description": "Valid metadata",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Validation failed",
											"errors": {
												"metadata": "Invalid metadata."
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Validates a hypercert metadata object. When an allowlist URI is provided the service will validate the allowlist data as well.",
				"tags": [
					"Metadata"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- The metadata object to be validated.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ValidateMetadataRequest",
								"description": "- The metadata object to be validated."
							}
						}
					}
				}
			}
		},
		"/v1/metadata/with-allowlist/validate": {
			"post": {
				"operationId": "ValidateMetadataWithAllowlist",
				"responses": {
					"200": {
						"description": "Valid metadata",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Validation failed",
											"errors": {
												"metadata": "Invalid metadata."
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Validates a hypercert metadata object paired with allowlist data.",
				"tags": [
					"Metadata"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- The metadata object and allowlist data to be validated.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/StoreMetadataWithAllowlistRequest",
								"description": "- The metadata object and allowlist data to be validated."
							}
						}
					}
				}
			}
		},
		"/v1/marketplace/orders": {
			"post": {
				"operationId": "StoreOrder",
				"responses": {
					"201": {
						"description": "Order created successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"error": {},
												"data": {},
												"message": {
													"type": "string"
												},
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"error",
												"data",
												"message",
												"success"
											],
											"type": "object"
										},
										{
											"properties": {
												"error": {},
												"data": {
													"properties": {
														"order": {
															"$ref": "#/components/schemas/Omit__additionalParameters-string--amounts-number-Array--chainId-number--collection-string--collectionType-number--createdAt-string--currency-string--endTime-number--globalNonce-string--id-string--invalidated-boolean--itemIds-string-Array--orderNonce-string--price-string--quoteType-number--signature-string--signer-string--startTime-number--strategyId-number--subsetNonce-number--validator_codes-number-Array_.id-or-createdAt-or-invalidated-or-validator_codes_"
														},
														"validatorCodes": {
															"items": {
																"$ref": "#/components/schemas/OrderValidatorCode"
															},
															"type": "array"
														},
														"valid": {
															"type": "boolean"
														},
														"id": {
															"type": "string"
														}
													},
													"required": [
														"order",
														"validatorCodes",
														"valid",
														"id"
													],
													"type": "object"
												},
												"success": {
													"type": "boolean"
												},
												"message": {
													"type": "string"
												}
											},
											"required": [
												"data",
												"success",
												"message"
											],
											"type": "object"
										},
										{
											"properties": {
												"error": {},
												"data": {
													"properties": {
														"validator_codes": {
															"items": {
																"type": "number",
																"format": "double"
															},
															"type": "array"
														},
														"subsetNonce": {
															"type": "number",
															"format": "double"
														},
														"strategyId": {
															"type": "number",
															"format": "double"
														},
														"startTime": {
															"type": "number",
															"format": "double"
														},
														"signer": {
															"type": "string"
														},
														"signature": {
															"type": "string"
														},
														"quoteType": {
															"type": "number",
															"format": "double"
														},
														"price": {
															"type": "string"
														},
														"orderNonce": {
															"type": "string"
														},
														"invalidated": {
															"type": "boolean"
														},
														"id": {
															"type": "string"
														},
														"hypercert_id": {
															"type": "string"
														},
														"globalNonce": {
															"type": "string"
														},
														"endTime": {
															"type": "number",
															"format": "double"
														},
														"currency": {
															"type": "string"
														},
														"createdAt": {
															"type": "string"
														},
														"collectionType": {
															"type": "number",
															"format": "double"
														},
														"collection": {
															"type": "string"
														},
														"chainId": {
															"type": "number",
															"format": "double"
														},
														"additionalParameters": {
															"type": "string"
														},
														"hash": {
															"type": "string"
														},
														"status": {
															"type": "string"
														},
														"amounts": {
															"items": {
																"type": "number",
																"format": "double"
															},
															"type": "array"
														},
														"itemIds": {
															"items": {
																"type": "string"
															},
															"type": "array"
														}
													},
													"required": [
														"validator_codes",
														"subsetNonce",
														"strategyId",
														"startTime",
														"signer",
														"signature",
														"quoteType",
														"price",
														"orderNonce",
														"invalidated",
														"id",
														"hypercert_id",
														"globalNonce",
														"endTime",
														"currency",
														"createdAt",
														"collectionType",
														"collection",
														"chainId",
														"additionalParameters",
														"hash",
														"status",
														"amounts",
														"itemIds"
													],
													"type": "object"
												},
												"success": {
													"type": "boolean"
												},
												"message": {
													"type": "string"
												}
											},
											"required": [
												"data",
												"success",
												"message"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Order could not be created"
										}
									}
								}
							}
						}
					}
				},
				"description": "Submits a new order for validation and storage on the database.",
				"tags": [
					"Marketplace"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOrderRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteOrder",
				"responses": {
					"200": {
						"description": "Order deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {},
										"message": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"data",
										"message",
										"success"
									],
									"type": "object"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Order could not be deleted"
										}
									}
								}
							}
						}
					}
				},
				"description": "Delete order from database",
				"tags": [
					"Marketplace"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"signature": {
										"type": "string"
									},
									"orderId": {
										"type": "string"
									}
								},
								"required": [
									"signature",
									"orderId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/marketplace/order-nonce": {
			"post": {
				"operationId": "UpdateOrderNonce",
				"responses": {
					"200": {
						"description": "Order nonce updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"properties": {
												"nonce_counter": {
													"type": "number",
													"format": "double"
												},
												"created_at": {
													"type": "string"
												},
												"chain_id": {
													"type": "number",
													"format": "double"
												},
												"address": {
													"type": "string"
												}
											},
											"required": [
												"nonce_counter",
												"created_at",
												"chain_id",
												"address"
											],
											"type": "object"
										},
										"message": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"data",
										"message",
										"success"
									],
									"type": "object"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Order nonce could not be updated"
										}
									}
								}
							}
						}
					}
				},
				"description": "Updates and returns the order nonce for a user on a specific chain.",
				"tags": [
					"Marketplace"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateOrderNonceRequest"
							}
						}
					}
				}
			}
		},
		"/v1/marketplace/orders/validate": {
			"post": {
				"operationId": "ValidateOrder",
				"responses": {
					"200": {
						"description": "Order validated successfully",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"properties": {
													"validator_codes": {
														"items": {
															"$ref": "#/components/schemas/OrderValidatorCode"
														},
														"type": "array"
													},
													"invalidated": {
														"type": "boolean"
													},
													"id": {
														"type": "string"
													}
												},
												"required": [
													"validator_codes",
													"invalidated",
													"id"
												],
												"type": "object"
											},
											"type": "array"
										},
										"message": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"data",
										"message",
										"success"
									],
									"type": "object"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Order could not be validated"
										}
									}
								}
							}
						}
					}
				},
				"description": "Validates an order and marks it as invalid if validation fails.",
				"tags": [
					"Marketplace"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ValidateOrderRequest"
							}
						}
					}
				}
			}
		},
		"/v1/hyperboards": {
			"post": {
				"operationId": "CreateHyperboard",
				"responses": {
					"201": {
						"description": "Data uploaded successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HyperboardResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Errors while validating hyperboard"
										}
									}
								}
							}
						}
					}
				},
				"description": "Create a new hyperboard. Creates the collections passed to it automatically.",
				"tags": [
					"Hyperboards"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HyperboardCreateRequest"
							}
						}
					}
				}
			}
		},
		"/v1/hyperboards/{hyperboardId}": {
			"patch": {
				"operationId": "UpdateHyperboard",
				"responses": {
					"204": {
						"description": "Hyperboard updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HyperboardResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Errors while updating hyperboard"
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Hyperboards"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "hyperboardId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HyperboardUpdateRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteHyperboard",
				"responses": {
					"204": {
						"description": "Hyperboard deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Errors while deleting hyperboard"
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Hyperboards"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "hyperboardId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "adminAddress",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "signature",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/blueprints": {
			"post": {
				"operationId": "CreateBlueprint",
				"responses": {
					"201": {
						"description": "Blueprint created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlueprintResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlueprintResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Validation failed",
											"errors": {
												"blueprint": "Invalid blueprint."
											}
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Blueprints"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlueprintCreateRequest"
							}
						}
					}
				}
			}
		},
		"/v1/blueprints/{blueprintId}": {
			"delete": {
				"operationId": "DeleteBlueprint",
				"responses": {
					"200": {
						"description": "Blueprint deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"errors": {},
												"data": {},
												"message": {
													"type": "string"
												},
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"errors",
												"data",
												"message",
												"success"
											],
											"type": "object"
										},
										{
											"properties": {
												"data": {},
												"errors": {
													"properties": {
														"signature": {},
														"blueprint": {
															"type": "string"
														}
													},
													"required": [
														"blueprint"
													],
													"type": "object"
												},
												"message": {
													"type": "string"
												},
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"errors",
												"message",
												"success"
											],
											"type": "object"
										},
										{
											"properties": {
												"data": {},
												"errors": {
													"properties": {
														"blueprint": {},
														"signature": {
															"type": "string"
														}
													},
													"required": [
														"signature"
													],
													"type": "object"
												},
												"message": {
													"type": "string"
												},
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"errors",
												"message",
												"success"
											],
											"type": "object"
										},
										{
											"properties": {
												"errors": {},
												"data": {},
												"message": {
													"type": "string"
												},
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"message",
												"success"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Validation failed",
											"errors": {
												"blueprint": "Invalid blueprint."
											}
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Blueprints"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "blueprintId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlueprintDeleteRequest"
							}
						}
					}
				}
			}
		},
		"/v1/blueprints/mint/{blueprintId}": {
			"post": {
				"operationId": "MintBlueprint",
				"responses": {
					"201": {
						"description": "Blueprint minted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlueprintResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BaseResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Validation failed",
											"errors": {
												"blueprint": "Invalid blueprint."
											}
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Blueprints"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "blueprintId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlueprintQueueMintRequest"
							}
						}
					}
				}
			}
		},
		"/v1/allowlists": {
			"post": {
				"operationId": "StoreAllowList",
				"responses": {
					"201": {
						"description": "Data uploaded successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StorageResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StorageResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Errors while validating allow list",
											"errors": {
												"allowList": "Invalid allowList. Length is  0"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Submits a new allowlist for validation and storage on IPFS. While we maintain a database of allowlists, the allowlist itself is stored on IPFS.\nTry to keep a backup of the allowlist for recovery purposes.\n\nProvide the dump of the OpenZeppelin MerkleTree and the total units.",
				"tags": [
					"Allowlists"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/StoreAllowListRequest"
							}
						}
					}
				}
			}
		},
		"/v1/allowlists/validate": {
			"post": {
				"operationId": "ValidateAllowList",
				"responses": {
					"200": {
						"description": "Valid allowlist object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"valid": false,
											"message": "Metadata validation failed",
											"errors": {
												"allowList": "Invalid allowList. Length is  0"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Submits a new allowlist for validation.\n\nProvide the dump of the OpenZeppelin MerkleTree and the total units.",
				"tags": [
					"Allowlists"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ValidateAllowListRequest"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}
{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Record_string.string-or-string-Array_": {
				"properties": {},
				"additionalProperties": {
					"anyOf": [
						{
							"type": "string"
						},
						{
							"items": {
								"type": "string"
							},
							"type": "array"
						}
					]
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"Error": {
				"properties": {
					"name": {
						"type": "string"
					},
					"message": {
						"type": "string"
					},
					"stack": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse__address-string_-or-null_": {
				"properties": {
					"errors": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Record_string.string-or-string-Array_"
							},
							{
								"items": {
									"$ref": "#/components/schemas/Error"
								},
								"type": "array"
							}
						]
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"address": {
								"type": "string"
							}
						},
						"required": [
							"address"
						],
						"type": "object",
						"nullable": true
					},
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"description": "Interface for a generic API response."
			},
			"AddOrUpdateUserResponse": {
				"$ref": "#/components/schemas/ApiResponse__address-string_-or-null_"
			},
			"ApiResponse": {
				"properties": {
					"errors": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Record_string.string-or-string-Array_"
							},
							{
								"items": {
									"$ref": "#/components/schemas/Error"
								},
								"type": "array"
							}
						]
					},
					"message": {
						"type": "string"
					},
					"data": {},
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"description": "Interface for a generic API response."
			},
			"AddOrUpdateUserRequest": {
				"description": "Interface for a user add or update request.",
				"properties": {
					"display_name": {
						"type": "string"
					},
					"avatar": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					},
					"chain_id": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"display_name",
					"avatar",
					"signature",
					"chain_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse__cid-string__": {
				"properties": {
					"errors": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Record_string.string-or-string-Array_"
							},
							{
								"items": {
									"$ref": "#/components/schemas/Error"
								},
								"type": "array"
							}
						]
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"cid": {
								"type": "string"
							}
						},
						"required": [
							"cid"
						],
						"type": "object"
					},
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"description": "Interface for a generic API response."
			},
			"StorageResponse": {
				"$ref": "#/components/schemas/ApiResponse__cid-string__",
				"description": "Interface for a storage response."
			},
			"HypercertClaimdata_36_1": {
				"description": "Properties of an impact claim",
				"properties": {
					"impact_scope": {
						"properties": {
							"display_value": {
								"type": "string"
							},
							"excludes": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"value": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Scopes of impact"
					},
					"work_scope": {
						"properties": {
							"display_value": {
								"type": "string"
							},
							"excludes": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"value": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Scopes of work"
					},
					"work_timeframe": {
						"properties": {
							"display_value": {
								"type": "string"
							},
							"value": {
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Work time period. The value is UNIX time in seconds from epoch."
					},
					"impact_timeframe": {
						"properties": {
							"display_value": {
								"type": "string"
							},
							"value": {
								"items": {
									"type": "number",
									"format": "double"
								},
								"type": "array"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Impact time period. The value is UNIX time in seconds from epoch."
					},
					"contributors": {
						"properties": {
							"display_value": {
								"type": "string"
							},
							"value": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Contributors"
					},
					"rights": {
						"properties": {
							"display_value": {
								"type": "string"
							},
							"excludes": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"value": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"name": {
								"type": "string"
							}
						},
						"additionalProperties": {},
						"type": "object",
						"description": "Rights"
					}
				},
				"required": [
					"impact_scope",
					"work_scope",
					"work_timeframe",
					"impact_timeframe",
					"contributors"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"HypercertMetadata": {
				"description": "Claim data for hypercert. ERC1155 Metadata compliant",
				"properties": {
					"name": {
						"type": "string",
						"description": "Identifies the asset to which this token represents"
					},
					"description": {
						"type": "string",
						"description": "Describes the asset to which this token represents"
					},
					"external_url": {
						"type": "string",
						"description": "An url pointing to the external website of the project"
					},
					"image": {
						"type": "string",
						"description": "A URI pointing to a resource with mime type image/* representing the asset to which this token represents. Consider making any images at a width between 320 and 1080 pixels and aspect ratio between 1.91:1 and 4:5 inclusive."
					},
					"version": {
						"type": "string",
						"description": "The version of Hypercert schema used to describe this hypercert"
					},
					"ref": {
						"type": "string",
						"description": "Describes the asset to which this token represents"
					},
					"allowList": {
						"type": "string",
						"description": "A CID pointer to the merke tree proof json on ipfs"
					},
					"properties": {
						"items": {
							"properties": {
								"value": {
									"type": "string"
								},
								"trait_type": {
									"type": "string"
								}
							},
							"additionalProperties": {},
							"type": "object"
						},
						"type": "array"
					},
					"hypercert": {
						"$ref": "#/components/schemas/HypercertClaimdata_36_1"
					}
				},
				"required": [
					"name",
					"description",
					"image"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StoreMetadataRequest": {
				"description": "Interface for storing metadata on IPFS.",
				"properties": {
					"metadata": {
						"$ref": "#/components/schemas/HypercertMetadata"
					}
				},
				"required": [
					"metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StoreMetadataWithAllowlistRequest": {
				"description": "Interface for storing metadata and allow list dump on IPFS.",
				"properties": {
					"metadata": {
						"$ref": "#/components/schemas/HypercertMetadata"
					},
					"allowList": {
						"type": "string"
					},
					"totalUnits": {
						"type": "string"
					}
				},
				"required": [
					"metadata",
					"allowList"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidationResult": {
				"properties": {
					"errors": {
						"$ref": "#/components/schemas/Record_string.string-or-string-Array_"
					},
					"data": {},
					"valid": {
						"type": "boolean"
					}
				},
				"required": [
					"valid"
				],
				"type": "object",
				"description": "Interface for a validation response."
			},
			"ApiResponse_ValidationResult_": {
				"properties": {
					"errors": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Record_string.string-or-string-Array_"
							},
							{
								"items": {
									"$ref": "#/components/schemas/Error"
								},
								"type": "array"
							}
						]
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/ValidationResult"
					},
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"description": "Interface for a generic API response."
			},
			"ValidationResponse": {
				"$ref": "#/components/schemas/ApiResponse_ValidationResult_",
				"description": "Interface for a validation response."
			},
			"ValidateMetadataRequest": {
				"description": "Interface for validating metadata.",
				"properties": {
					"metadata": {
						"$ref": "#/components/schemas/HypercertMetadata"
					}
				},
				"required": [
					"metadata"
				],
				"type": "object",
				"additionalProperties": false
			},
			"OrderValidatorCode": {
				"description": "Error errors returned by the order validator contract",
				"enum": [
					0,
					101,
					111,
					112,
					113,
					201,
					211,
					212,
					213,
					301,
					311,
					312,
					321,
					322,
					401,
					402,
					411,
					412,
					413,
					414,
					415,
					421,
					422,
					501,
					502,
					503,
					601,
					611,
					612,
					621,
					622,
					623,
					631,
					632,
					633,
					634,
					701,
					702,
					801,
					802,
					901,
					902
				],
				"type": "number"
			},
			"Pick__additionalParameters-string--amounts-number-Array--chainId-number--collection-string--collectionType-number--createdAt-string--currency-string--endTime-number--globalNonce-string--id-string--invalidated-boolean--itemIds-string-Array--orderNonce-string--price-string--quoteType-number--signature-string--signer-string--startTime-number--strategyId-number--subsetNonce-number--validator_codes-number-Array_.Exclude_keyof_additionalParameters-string--amounts-number-Array--chainId-number--collection-string--collectionType-number--createdAt-string--currency-string--endTime-number--globalNonce-string--id-string--invalidated-boolean--itemIds-string-Array--orderNonce-string--price-string--quoteType-number--signature-string--signer-string--startTime-number--strategyId-number--subsetNonce-number--validator_codes-number-Array_.id-or-createdAt-or-invalidated-or-validator_codes__": {
				"properties": {},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit__additionalParameters-string--amounts-number-Array--chainId-number--collection-string--collectionType-number--createdAt-string--currency-string--endTime-number--globalNonce-string--id-string--invalidated-boolean--itemIds-string-Array--orderNonce-string--price-string--quoteType-number--signature-string--signer-string--startTime-number--strategyId-number--subsetNonce-number--validator_codes-number-Array_.id-or-createdAt-or-invalidated-or-validator_codes_": {
				"$ref": "#/components/schemas/Pick__additionalParameters-string--amounts-number-Array--chainId-number--collection-string--collectionType-number--createdAt-string--currency-string--endTime-number--globalNonce-string--id-string--invalidated-boolean--itemIds-string-Array--orderNonce-string--price-string--quoteType-number--signature-string--signer-string--startTime-number--strategyId-number--subsetNonce-number--validator_codes-number-Array_.Exclude_keyof_additionalParameters-string--amounts-number-Array--chainId-number--collection-string--collectionType-number--createdAt-string--currency-string--endTime-number--globalNonce-string--id-string--invalidated-boolean--itemIds-string-Array--orderNonce-string--price-string--quoteType-number--signature-string--signer-string--startTime-number--strategyId-number--subsetNonce-number--validator_codes-number-Array_.id-or-createdAt-or-invalidated-or-validator_codes__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateOrderRequest": {
				"properties": {
					"signature": {
						"type": "string"
					},
					"chainId": {
						"type": "number",
						"format": "double"
					},
					"quoteType": {
						"type": "number",
						"format": "double"
					},
					"globalNonce": {
						"type": "string"
					},
					"subsetNonce": {
						"type": "number",
						"format": "double"
					},
					"orderNonce": {
						"type": "string"
					},
					"strategyId": {
						"type": "number",
						"format": "double"
					},
					"collectionType": {
						"type": "number",
						"format": "double"
					},
					"collection": {
						"type": "string"
					},
					"currency": {
						"type": "string"
					},
					"signer": {
						"type": "string"
					},
					"startTime": {
						"type": "number",
						"format": "double"
					},
					"endTime": {
						"type": "number",
						"format": "double"
					},
					"price": {
						"type": "string"
					},
					"itemIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"amounts": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"additionalParameters": {
						"type": "string"
					}
				},
				"required": [
					"signature",
					"chainId",
					"quoteType",
					"globalNonce",
					"subsetNonce",
					"orderNonce",
					"strategyId",
					"collectionType",
					"collection",
					"currency",
					"signer",
					"startTime",
					"endTime",
					"price",
					"itemIds",
					"amounts",
					"additionalParameters"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateOrderNonceRequest": {
				"properties": {
					"address": {
						"type": "string"
					},
					"chainId": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"address",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidateOrderRequest": {
				"properties": {
					"tokenIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"chainId": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"tokenIds",
					"chainId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse__id-string_-or-null_": {
				"properties": {
					"errors": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/Record_string.string-or-string-Array_"
							},
							{
								"items": {
									"$ref": "#/components/schemas/Error"
								},
								"type": "array"
							}
						]
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"id": {
								"type": "string"
							}
						},
						"required": [
							"id"
						],
						"type": "object",
						"nullable": true
					},
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"description": "Interface for a generic API response."
			},
			"HyperboardCreateResponse": {
				"$ref": "#/components/schemas/ApiResponse__id-string_-or-null_",
				"description": "Response for a created hyperboard"
			},
			"HyperboardCreateRequest": {
				"description": "Interface for creating a hyperboard",
				"properties": {
					"chainIds": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"title": {
						"type": "string"
					},
					"collections": {
						"items": {
							"properties": {
								"hypercerts": {
									"items": {
										"properties": {
											"factor": {
												"type": "number",
												"format": "double"
											},
											"hypercertId": {
												"type": "string"
											}
										},
										"required": [
											"factor",
											"hypercertId"
										],
										"type": "object"
									},
									"type": "array"
								},
								"description": {
									"type": "string"
								},
								"title": {
									"type": "string"
								}
							},
							"required": [
								"hypercerts",
								"description",
								"title"
							],
							"type": "object"
						},
						"type": "array"
					},
					"backgroundImg": {
						"type": "string"
					},
					"borderColor": {
						"type": "string"
					},
					"adminAddress": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					}
				},
				"required": [
					"chainIds",
					"title",
					"collections",
					"borderColor",
					"adminAddress",
					"signature"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HyperboardUpdateRequest": {
				"description": "Interface for updating a hyperboard",
				"properties": {
					"id": {
						"type": "string"
					},
					"chainIds": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"title": {
						"type": "string"
					},
					"collections": {
						"items": {
							"properties": {
								"hypercerts": {
									"items": {
										"properties": {
											"factor": {
												"type": "number",
												"format": "double"
											},
											"hypercertId": {
												"type": "string"
											},
											"id": {
												"type": "string"
											}
										},
										"required": [
											"factor",
											"hypercertId"
										],
										"type": "object"
									},
									"type": "array"
								},
								"description": {
									"type": "string"
								},
								"title": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							},
							"required": [
								"hypercerts",
								"description",
								"title"
							],
							"type": "object"
						},
						"type": "array"
					},
					"backgroundImg": {
						"type": "string"
					},
					"borderColor": {
						"type": "string"
					},
					"adminAddress": {
						"type": "string"
					},
					"signature": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"chainIds",
					"title",
					"collections",
					"borderColor",
					"adminAddress",
					"signature"
				],
				"type": "object",
				"additionalProperties": false
			},
			"StoreAllowListRequest": {
				"description": "Interface for storing an allow list dump on IPFS",
				"properties": {
					"allowList": {
						"type": "string"
					},
					"totalUnits": {
						"type": "string"
					}
				},
				"required": [
					"allowList"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ValidateAllowListRequest": {
				"description": "Interface for validating an allow list dump.",
				"properties": {
					"allowList": {
						"type": "string"
					},
					"totalUnits": {
						"type": "string"
					}
				},
				"required": [
					"allowList"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "Hypercerts API",
		"version": "1.0.0",
		"description": "API for uploading allow lists and hypercert metadata. Visit /graphql for the GraphQL API.",
		"contact": {
			"url": "https://hypercerts.org"
		}
	},
	"paths": {
		"/v1/users/{address}": {
			"post": {
				"operationId": "AddOrUpdateUser",
				"responses": {
					"201": {
						"description": "User updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddOrUpdateUserResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Errors while validating user"
										}
									}
								}
							}
						}
					}
				},
				"description": "Add or update a user",
				"tags": [
					"Users"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddOrUpdateUserRequest"
							}
						}
					}
				}
			}
		},
		"/v1/metadata": {
			"post": {
				"operationId": "StoreMetadata",
				"responses": {
					"201": {
						"description": "Data uploaded successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StorageResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Validation failed",
											"errors": {
												"metadata": "Invalid metadata."
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Submits a new hypercert metadata object for validation and storage on IPFS.\nWhen an allowlist URI is provided the service will validate the allowlist data before storing the metadata.\nNote that this might lead to a race condition when uploading metadata and the allowlist separately in rapid succession.\nIn that case we recommend using POST /metadata/with-allowlist instead.",
				"tags": [
					"Metadata"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The metadata object to be stored.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/StoreMetadataRequest",
								"description": "The metadata object to be stored."
							}
						}
					}
				}
			}
		},
		"/v1/metadata/with-allowlist": {
			"post": {
				"operationId": "StoreMetadataWithAllowlist",
				"responses": {
					"201": {
						"description": "Data uploaded successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StorageResponse"
								}
							}
						}
					},
					"409": {
						"description": "Conflict",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Allow list detected in metadata",
											"errors": {
												"metadata": "Allowlist URI already present in metadata."
											}
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Validation failed",
											"errors": {
												"metadata": "Invalid metadata."
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Submits a new hypercert metadata object paired with allowlist data for validation and storage on IPFS.\nThe service will parse and validate the allow list data and the metadata.\nAfter successful validation, the allow list data will be uploaded to IPFS and the URI of the allowlist will be attached to the hypercert metadata.\nIf an allow list URI is already present, the service will return an error.",
				"tags": [
					"Metadata"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The metadata object and allowlist data to be stored.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/StoreMetadataWithAllowlistRequest",
								"description": "The metadata object and allowlist data to be stored."
							}
						}
					}
				}
			}
		},
		"/v1/metadata/validate": {
			"post": {
				"operationId": "ValidateMetadata",
				"responses": {
					"200": {
						"description": "Valid metadata",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Validation failed",
											"errors": {
												"metadata": "Invalid metadata."
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Validates a hypercert metadata object. When an allowlist URI is provided the service will validate the allowlist data as well.",
				"tags": [
					"Metadata"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- The metadata object to be validated.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ValidateMetadataRequest",
								"description": "- The metadata object to be validated."
							}
						}
					}
				}
			}
		},
		"/v1/metadata/with-allowlist/validate": {
			"post": {
				"operationId": "ValidateMetadataWithAllowlist",
				"responses": {
					"200": {
						"description": "Valid metadata",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Validation failed",
											"errors": {
												"metadata": "Invalid metadata."
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Validates a hypercert metadata object paired with allowlist data.",
				"tags": [
					"Metadata"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "- The metadata object and allowlist data to be validated.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/StoreMetadataWithAllowlistRequest",
								"description": "- The metadata object and allowlist data to be validated."
							}
						}
					}
				}
			}
		},
		"/v1/marketplace/orders": {
			"post": {
				"operationId": "StoreOrder",
				"responses": {
					"201": {
						"description": "Order created successfully",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"error": {},
												"data": {},
												"message": {
													"type": "string"
												},
												"success": {
													"type": "boolean"
												}
											},
											"required": [
												"error",
												"data",
												"message",
												"success"
											],
											"type": "object"
										},
										{
											"properties": {
												"error": {},
												"data": {
													"properties": {
														"order": {
															"$ref": "#/components/schemas/Omit__additionalParameters-string--amounts-number-Array--chainId-number--collection-string--collectionType-number--createdAt-string--currency-string--endTime-number--globalNonce-string--id-string--invalidated-boolean--itemIds-string-Array--orderNonce-string--price-string--quoteType-number--signature-string--signer-string--startTime-number--strategyId-number--subsetNonce-number--validator_codes-number-Array_.id-or-createdAt-or-invalidated-or-validator_codes_"
														},
														"validatorCodes": {
															"items": {
																"$ref": "#/components/schemas/OrderValidatorCode"
															},
															"type": "array"
														},
														"valid": {
															"type": "boolean"
														},
														"id": {
															"type": "string"
														}
													},
													"required": [
														"order",
														"validatorCodes",
														"valid",
														"id"
													],
													"type": "object"
												},
												"success": {
													"type": "boolean"
												},
												"message": {
													"type": "string"
												}
											},
											"required": [
												"data",
												"success",
												"message"
											],
											"type": "object"
										},
										{
											"properties": {
												"error": {},
												"data": {
													"properties": {
														"validator_codes": {
															"items": {
																"type": "number",
																"format": "double"
															},
															"type": "array"
														},
														"subsetNonce": {
															"type": "number",
															"format": "double"
														},
														"strategyId": {
															"type": "number",
															"format": "double"
														},
														"startTime": {
															"type": "number",
															"format": "double"
														},
														"signer": {
															"type": "string"
														},
														"signature": {
															"type": "string"
														},
														"quoteType": {
															"type": "number",
															"format": "double"
														},
														"price": {
															"type": "string"
														},
														"orderNonce": {
															"type": "string"
														},
														"invalidated": {
															"type": "boolean"
														},
														"id": {
															"type": "string"
														},
														"hypercert_id": {
															"type": "string"
														},
														"globalNonce": {
															"type": "string"
														},
														"endTime": {
															"type": "number",
															"format": "double"
														},
														"currency": {
															"type": "string"
														},
														"createdAt": {
															"type": "string"
														},
														"collectionType": {
															"type": "number",
															"format": "double"
														},
														"collection": {
															"type": "string"
														},
														"chainId": {
															"type": "number",
															"format": "double"
														},
														"additionalParameters": {
															"type": "string"
														},
														"hash": {
															"type": "string"
														},
														"status": {
															"type": "string"
														},
														"amounts": {
															"items": {
																"type": "number",
																"format": "double"
															},
															"type": "array"
														},
														"itemIds": {
															"items": {
																"type": "string"
															},
															"type": "array"
														}
													},
													"required": [
														"validator_codes",
														"subsetNonce",
														"strategyId",
														"startTime",
														"signer",
														"signature",
														"quoteType",
														"price",
														"orderNonce",
														"invalidated",
														"id",
														"hypercert_id",
														"globalNonce",
														"endTime",
														"currency",
														"createdAt",
														"collectionType",
														"collection",
														"chainId",
														"additionalParameters",
														"hash",
														"status",
														"amounts",
														"itemIds"
													],
													"type": "object"
												},
												"success": {
													"type": "boolean"
												},
												"message": {
													"type": "string"
												}
											},
											"required": [
												"data",
												"success",
												"message"
											],
											"type": "object"
										}
									]
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Order could not be created"
										}
									}
								}
							}
						}
					}
				},
				"description": "Submits a new order for validation and storage on the database.",
				"tags": [
					"Marketplace"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateOrderRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteOrder",
				"responses": {
					"200": {
						"description": "Order deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {},
										"message": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"data",
										"message",
										"success"
									],
									"type": "object"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Order could not be deleted"
										}
									}
								}
							}
						}
					}
				},
				"description": "Delete order from database",
				"tags": [
					"Marketplace"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"signature": {
										"type": "string"
									},
									"orderId": {
										"type": "string"
									}
								},
								"required": [
									"signature",
									"orderId"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/v1/marketplace/order-nonce": {
			"post": {
				"operationId": "UpdateOrderNonce",
				"responses": {
					"200": {
						"description": "Order nonce updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"properties": {
												"nonce_counter": {
													"type": "number",
													"format": "double"
												},
												"created_at": {
													"type": "string"
												},
												"chain_id": {
													"type": "number",
													"format": "double"
												},
												"address": {
													"type": "string"
												}
											},
											"required": [
												"nonce_counter",
												"created_at",
												"chain_id",
												"address"
											],
											"type": "object"
										},
										"message": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"data",
										"message",
										"success"
									],
									"type": "object"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Order nonce could not be updated"
										}
									}
								}
							}
						}
					}
				},
				"description": "Updates and returns the order nonce for a user on a specific chain.",
				"tags": [
					"Marketplace"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateOrderNonceRequest"
							}
						}
					}
				}
			}
		},
		"/v1/marketplace/orders/validate": {
			"post": {
				"operationId": "ValidateOrder",
				"responses": {
					"200": {
						"description": "Order validated successfully",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {
											"items": {
												"properties": {
													"validator_codes": {
														"items": {
															"$ref": "#/components/schemas/OrderValidatorCode"
														},
														"type": "array"
													},
													"invalidated": {
														"type": "boolean"
													},
													"id": {
														"type": "string"
													}
												},
												"required": [
													"validator_codes",
													"invalidated",
													"id"
												],
												"type": "object"
											},
											"type": "array"
										},
										"message": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"data",
										"message",
										"success"
									],
									"type": "object"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Order could not be validated"
										}
									}
								}
							}
						}
					}
				},
				"description": "Validates an order and marks it as invalid if validation fails.",
				"tags": [
					"Marketplace"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ValidateOrderRequest"
							}
						}
					}
				}
			}
		},
		"/v1/hyperboards": {
			"post": {
				"operationId": "CreateHyperboard",
				"responses": {
					"201": {
						"description": "Data uploaded successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HyperboardCreateResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Errors while validating hyperboard"
										}
									}
								}
							}
						}
					}
				},
				"description": "Create a new hyperboard. Creates the collections passed to it automatically.",
				"tags": [
					"Hyperboards"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HyperboardCreateRequest"
							}
						}
					}
				}
			}
		},
		"/v1/hyperboards/{hyperboardId}": {
			"patch": {
				"operationId": "UpdateHyperboard",
				"responses": {
					"204": {
						"description": "Hyperboard updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse__id-string_-or-null_"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Errors while updating hyperboard"
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Hyperboards"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "hyperboardId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/HyperboardUpdateRequest"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteHyperboard",
				"responses": {
					"204": {
						"description": "Hyperboard deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Errors while deleting hyperboard"
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Hyperboards"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "hyperboardId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "adminAddress",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "signature",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/allowlists": {
			"post": {
				"operationId": "StoreAllowList",
				"responses": {
					"201": {
						"description": "Data uploaded successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/StorageResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Errors while validating allow list",
											"errors": {
												"allowList": "Invalid allowList. Length is  0"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Submits a new allowlist for validation and storage on IPFS. While we maintain a database of allowlists, the allowlist itself is stored on IPFS.\nTry to keep a backup of the allowlist for recovery purposes.\n\nProvide the dump of the OpenZeppelin MerkleTree and the total units.",
				"tags": [
					"Allowlists"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/StoreAllowListRequest"
							}
						}
					}
				}
			}
		},
		"/v1/allowlists/validate": {
			"post": {
				"operationId": "ValidateAllowList",
				"responses": {
					"200": {
						"description": "Valid allowlist object",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationResponse"
								}
							}
						}
					},
					"422": {
						"description": "Unprocessable content",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"success": false,
											"message": "Metadata validation failed",
											"errors": {
												"allowList": "Invalid allowList. Length is  0"
											}
										}
									}
								}
							}
						}
					}
				},
				"description": "Submits a new allowlist for validation.\n\nProvide the dump of the OpenZeppelin MerkleTree and the total units.",
				"tags": [
					"Allowlists"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ValidateAllowListRequest"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}